Scheduling â€” NodeName, Labels/Node selector, Affinity
Taints and Tolerations
Namespace limits
Drain/uncordon
etcd backup
Monitoring
Volumes


# NodeName
~~~yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kubeserve
spec:
  replicas: 2
  selector:
    matchLabels:
      app: kubeserve
  template:
    metadata:
      name: kubeserve
      labels:
        app: kubeserve
    spec:
      nodeName: anode02     <------------------
      containers:
      - image: leaddevops/kubeserve:v1
        name: app

~~~
----------------------------------------------------------------------------
# Labels
we use labels for nodes , because we could have some nodes as production nodes and some asd dev nodes, so if we specify a particular group of nodes as DEV nodes, we can specify it and kubernetes will deploy only to those nodes

[devops@rhel1 pods]$ kubectl label nodes knode1 color=blue
[devops@rhel1 pods]$ kubectl label nodes knode2 color=green
[devops@rhel1 pods]$ kubectl label nodes knode3 color=green
[devops@rhel1 pods]$ kubectl describe knode3 | grep green
~~~yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kubeserve
spec:
  replicas: 2
  selector:
    matchLabels:
      app: kubeserve
  template:
    metadata:
      name: kubeserve
      labels:
        app: kubeserve
    spec:
      nodeSelector:         <-------------------->
         color: "green"
      containers:
      - image: leaddevops/kubeserve:v1
        name: app

* if you write selector: it will apply to pods
        and for nodeSelector: label applies to nodes
~~~
----------------------------------------------------------------------------
# Affinity
give weighted if-else for nodeSelection to deploy pods


~~~yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pref
spec:
  selector:
    matchLabels:
      app: pref
  replicas: 3
  template:
    metadata:
      labels:
        app: pref
    spec:
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          # or
          # requiredDuringSchedulingIgnoredDuringExecution:
          - weight: 80
            preference:
              matchExpressions:
              - key: zone           # assign this label to node
                operator: In
                values:
                - east
               #- west we can add multiple values too
          - weight: 20
            preference:
              matchExpressions:
              - key: type           # assign this label to node
                operator: In
                values:
                - web
      containers:
      - args:
        - sleep
        - "99999"
        image: busybox
        name: main
~~~
--------------------------------------------------------------------------
# Taints & Tolerations
> kubectl taint node knode2 zone=red:NoSchedule

2 effects avl
NoSchedule: no new pod should not go into that node
NoExecute: no new scheduling, older pods running on that node should also shift

> kubectl taint node knode1 situation-serious:NoExecute
HOW TO UNTAINT?
> kubectl taint node knode1 situation-serious:NoExecute-


----------your master node is by-default tainted
kubectl describe node master | grep -i taints
Taints:          node-role.kubernetes.io/master:NoSchedule



                                                       ^
 A taint consists of a key, value, and effect. As an argument here, it is
expressed as key=value:effect.
  *  The key must begin with a letter or number, and may contain letters,
numbers, hyphens, dots, and underscores, up to 253 characters.
  *  Optionally, the key can begin with a DNS subdomain prefix and a single '/',
like example.com/my-app.
  *  The value is optional. If given, it must begin with a letter or number, and
may contain letters, numbers, hyphens, dots, and underscores, up to 63
characters.
  *  The effect must be NoSchedule, PreferNoSchedule or NoExecute.
  *  Currently taint can only apply to node.

Examples:
  # Update node 'foo' with a taint with key 'dedicated' and value 'special-user'
and effect 'NoSchedule'
  # If a taint with that key and effect already exists, its value is replaced as
specified
  kubectl taint nodes foo dedicated=special-user:NoSchedule
  
  # Remove from node 'foo' the taint with key 'dedicated' and effect
'NoSchedule' if one exists
  kubectl taint nodes foo dedicated:NoSchedule-
  
  # Remove from node 'foo' all the taints with key 'dedicated'
  kubectl taint nodes foo dedicated-
  
  # Add a taint with key 'dedicated' on nodes having label myLabel=X
  kubectl taint node -l myLabel=X  dedicated=foo:PreferNoSchedule
  
  # Add to node 'foo' a taint with key 'bar' and no value
  kubectl taint nodes foo bar:NoSchedule


