Docker Networking 101
Docker Networking:
Container Network Model (CNM)
The Iibnetwork implements CNM
Driver extend the model by network topologies
Network Drivers:
•
•
bridge
host
overlay
macvlan
none
Network plugins


Container Network Model
Defines three building blocks:
                            Sandboxes
                            Endpoints
                            Networks


    --------CONTAINER A---------                   --------CONTAINER B--------------- 
    |                           |                  |                                 |
    |                           |                  |                                 |
    |  SANDBOX                  |                  |  SANDBOX                        |
    |      ENDPOINT (ep)        |                  |   ENDPOINT (ep)   ENDPOINT (ep) |
    |         |                 |                  |        |                |       |
    -----------------------------                   ---------------------------------
              |                                             |                |
            NETWORK A                                   NETWORK A           NETWORK B

Endpoints behave as real-world network adapters so they can be only connected to single network

Networking Commands

List networks:
docker network Is

Getting detailed info on a network:
docker network inspect <NAME>

Create a network
docker network create <NAME>


PS C:\Users\T480> docker network ls
NETWORK ID     NAME                                                        DRIVER    SCOPE
bdb6aa4df74f   bridge                                                      bridge    local
a434b634df19   docker_volumes-backup-extension-desktop-extension_default   bridge    local
edefc04be1a6   host                                                        host      local
578d1dd2d81c   none                                                        null      local
PS C:\Users\T480> docker network inspect bdb6aa4df74f
[
    {
        "Name": "bridge",
        "Id": "bdb6aa4df74fca168c6295600eedcde76431461b7ef18f0f047c1cb7111dd2d0",
        "Created": "2023-11-10T09:32:33.66701017Z",
        "Scope": "local",
        "Driver": "bridge",
        "EnableIPv6": false,
        "IPAM": {
            "Driver": "default",
            "Options": null,
            "Config": [
                {
                    "Subnet": "172.17.0.0/16",
                    "Gateway": "172.17.0.1"
                }
            ]
        },
        "Internal": false,
        "Attachable": false,
        "Ingress": false,
        "ConfigFrom": {
            "Network": ""
        },
        "ConfigOnly": false,
        "Containers": {
            "f1a5c71e3da7742132d7b01426dfca75e4c8a8d1561a506470110d5d684746cb": {
                "Name": "web1",
                "EndpointID": "9bf24c3dcbd796b1422b7808d8fe595a2fd527050005b7cba9e63f5679ba1a27",
                "MacAddress": "02:42:ac:11:00:02",
                "IPv4Address": "172.17.0.2/16",
                "IPv6Address": ""
            }
        },
        "Options": {
            "com.docker.network.bridge.default_bridge": "true",
            "com.docker.network.bridge.enable_icc": "true",
            "com.docker.network.bridge.enable_ip_masquerade": "true",
            "com.docker.network.bridge.host_binding_ipv4": "0.0.0.0",
            "com.docker.network.bridge.name": "docker0",
            "com.docker.network.driver.mtu": "1500"
        },
        "Labels": {}
    }
]
PS C:\Users\T480> docker network inspect edefc04be1a6
[
    {
        "Name": "host",
        "Id": "edefc04be1a68acaceeb7ef1ab5de15d944cc9e7ad546812d355c43aecd5338a",
        "Created": "2023-11-10T09:32:33.647544665Z",
        "Scope": "local",
        "Driver": "host",
        "EnableIPv6": false,
        "IPAM": {
            "Driver": "default",
            "Options": null,
            "Config": []
        },
        "Internal": false,
        "Attachable": false,
        "Ingress": false,
        "ConfigFrom": {
            "Network": ""
        },
        "ConfigOnly": false,
        "Containers": {},
        "Options": {},
        "Labels": {}
    }
]




=========================================================================================
CREATE A NETWORK 

 docker network create --subnet 10.1.0.0/16 --gateway 10.1.0.1 --ip-range 10.1.4.0/24 --driver bridge --label host4network br329
   43  docker network ls
   44  docker netwrok inspect br329
   49  docker container run -it --name net-test --network br329 centos /bin/bash



INSIDE CONTAINER
    sudo rpm -i 'centos-gpg-keys-8-3.el8.noarch.rpm'
    sed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-*
    sed -i 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-*
    yum update -y
    [root@326c4e586a16 /]# yum install -y net-tools

    [root@326c4e586a16 /]# ifconfig
    eth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
            inet 10.1.4.0  netmask 255.255.0.0  broadcast 10.1.255.255
            ether 02:42:0a:01:04:00  txqueuelen 0  (Ethernet)
            RX packets 68364  bytes 99325174 (94.7 MiB)
            RX errors 0  dropped 0  overruns 0  frame 0
            TX packets 22399  bytes 1550589 (1.4 MiB)
            TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

    lo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536
            inet 127.0.0.1  netmask 255.0.0.0
            loop  txqueuelen 1000  (Local Loopback)
            RX packets 128  bytes 19170 (18.7 KiB)
            RX errors 0  dropped 0  overruns 0  frame 0
            TX packets 128  bytes 19170 (18.7 KiB)
            TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0


    [root@326c4e586a16 /]# ip a
    1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
        link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
        inet 127.0.0.1/8 scope host lo
        valid_lft forever preferred_lft forever
    12: eth0@if13: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default
        link/ether 02:42:0a:01:04:00 brd ff:ff:ff:ff:ff:ff link-netnsid 0
        inet 10.1.4.0/16 brd 10.1.255.255 scope global eth0
        valid_lft forever preferred_lft forever
    [root@326c4e586a16 /]# netstat -rn
    Kernel IP routing table
    Destination     Gateway         Genmask         Flags   MSS Window  irtt Iface
    0.0.0.0         10.1.0.1        0.0.0.0         UG        0 0          0 eth0
    10.1.0.0        0.0.0.0         255.255.0.0     U         0 0          0 eth0
    [root@326c4e586a16 /]# cat /etc/resolv.conf
    nameserver 127.0.0.11
    options ndots:0

-------------------------------------------------------------------

rupert@T480-M8VDO3T:~$ docker container run -d --name net-test2 --ip 10.1.4.102 --network br329 nginx

rupert@T480-M8VDO3T:~$ docker container inspect net-test2 | grep IPAddr
            "SecondaryIPAddresses": null,
            "IPAddress": "",
                    "IPAddress": "10.1.4.102",