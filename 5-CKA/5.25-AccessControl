# RBAC in K8s
Role-based access control (RBAC) in K8s
allows you to control what users are allowed
to do and access within your cluster.
For example, you can use RBAC to allow
developers to read metadata and logs from
Kubernetes pods but not make changes to
them.

Roles and ClusterRoles are Kubernetes objects that define a set of permissions. These permissions determine what users can do in the cluster.

CLUSTER -> CLUSTERROLE (overall)
NAMESPACE1 -> ROLE1
NAMESPACE2 -> ROLE2
> A Role defines permissions within a particular namespace.
> A ClusterRole defines cluster-wide permissions not specific to a single namespace.

> RoleBinding and ClusterRoIeBinding are objects that connect Roles and ClusterRoles to users.

  429  vim role.yml
  430  kubectl apply -f role.yml 
  431  vim rolebinding.yml


[devops@rhel1 roles]$ cat role.yml 
~~~yml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: default
  name: pod-reader
rules:
- apiGroups: [""]
  resources: ["pods", "pods/log"]
  verbs: ["get", "watch", "list"]


[devops@rhel1 roles]$ cat rolebinding.yml 
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: pod-reader
  namespace: default
subjects:
- kind: user
  name: devops
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: Role
  name: pod-reader
  apiGroup: rbac.authorization.k8s.io
~~~

---
# LAB
> A kubeconfig file for the dev user has already been created on the server. You can use this file to test your RBAC setup as the dev user like so:
~~~bash
cloud_user@k8s-control:~$ kubectl get pods -n beebox-mobile --kubeconfig dev-k8s-config
Error from server (Forbidden): pods is forbidden: User "dev" cannot list resource "pods" in API group "" in the namespace "beebox-mobile"

cloud_user@k8s-control:~$ vim pod-reader-role.yml
cloud_user@k8s-control:~$ kubectl apply -f pod-reader-role.yml

createdcloud_user@k8s-control:~$ vim pod-reader-rolebinding.yml

cloud_user@k8s-control:~$ vim pod-reader-rolebinding.yml

cloud_user@k8s-control:~$ kubectl apply -f pod-reader-rolebinding.yml

createdcloud_user@k8s-control:~$ kubectl get pods -n beebox-mobile --kubeconfig dev-k8s-configNAME          READY   STATUS    RESTARTS   AGE
beebox-auth   1/1     Running   0          129m
~~~


---------------------------------------------------------------------------------
## What Is a Service Account?
In K8s, a service account is an account used by container processes within Pods to authenticate with the K8s API.

If your Pods need to communicate with the K8s API, you can use service accounts to control their access.

> Step 1 -
**Creating Service Accounts**
A service account object can be created with some YAML just like any other K8s  object.
~~~yml
apiVersion: VI
kind: ServiceAccount
metadata :
  name: my-serviceaccount
  namespace: default
~~~
---OR---
~~~bash
[devops@rhel1 k8s]$ kubectl create -f my-serviceaccount.yml 
serviceaccount/my-serviceaccount created
[devops@rhel1 k8s]$ kubectl create sa my-serviceaccount2 -n default
serviceaccount/my-serviceaccount2 created
[devops@rhel1 k8s]$ kubectl get sa
NAME                 SECRETS   AGE
default              0         45h
my-serviceaccount    0         25s
my-serviceaccount2   0         19s
~~~

> Step 2 -
**create a RoleBinding**
~~~yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: sa-pod-reader
  namespace: default
subjects:
- kind: ServiceAccount
  name: my-serviceaccount
  namespace: default
roleRef:
  kind: Role
  name: pod-reader
  apiGroup: rbac.authorization.k8s.io
~~~

-------------------------------------------------------------------------------
# kubectl top

~~~bash
kubectl top pod --sort-by <JSONPATH> --selector <selector>
