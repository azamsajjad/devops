# Application Configuration

**Application Configuration**
When you are running applications in
Kubernetes, you may want to pass dynamic
values to your applications at runtime to
control how they behave. This is known as
application configuration.

**ConfigMaps**
You can store configuration data in
Kubernetes using ConfigMaps.
ConfigMaps store data in the form of a
key-value map. ConfigMap data can
be passed to your container
applications.
~~~yaml
apiVersion: vl
kind: ConfigMap
metadata:
  name: my-configmap
data:
  key 1: valuel
  key 2: value2
  key 3:
    subkey: some more data
    morekeys: data
key4: |
    You can also do
    multi-line
    data.
~~~


**Secrets**
Secrets are similar to ConfigMaps but are designed to store sensitive data, such as
passwords or API keys, more securely. They are created and used similarly to ConfigMaps.
~~~yaml
apiVersion: vl
kind: Secret
metadata:
    name: my-secret
    type: Opaque
data :
    username: user
    password: mypass
~~~

You can pass ConfigMap and Secret data to your containers as environment variables. These
variables will be visible to your container process at runtime.
spec :
  containers:
  - :...
    env:
      - name: ENVVAR
        valueFrom:
          configMapKeyRef:
            name: my-configmap
            key: mykey


**Configuration Volumes**
Configuration data from ConfigMaps and Secrets can also be passed to containers in the
form of mounted volumes. This will cause the configuration data to appear in files available to
the container file system.
Each top-level key in the configuration data will appear as a file containing all keys below that
top-level key.


-------------------------------------------------------------------------------------------------
configMap/busybox.yml

~~~yml
apiVersion: v1
kind: Pod
metadata:
  name: env-pod
spec:
  containers:
  - name: busybox
    image: busybox
    command: ['sh', '-c', 'echo "configmap: $CONFIGMAPVAR secret: $SECRETVAR"']
    env:
    - name: CONFIGMAPVAR
      valueFrom:
        configMapKeyRef:
          name: my-configmap
          key: key1
    - name: SECRETVAR
      valueFrom:
        secretKeyRef:
          name: my-secret
          key: secretkey1


configmap/my-configmap.yml

apiVersion: v1
kind: ConfigMap
metadata:
  name: my-configmap
data:
  key1: Hello, world!
  key2: |
    Test
    multiple lines
    more lines


$ echo -n 'secret' | base64
$ echo -n 'anothersecret' | base64

configMap/my-secret.yml

apiVersion: v1
kind: Secret
metadata:
  name: my-secret
type: Opaque
data:
  secretkey1: c2VjcmV0
  secretkey2: YW5vdGhlcnNlY3JldA==
~~~
-----------------------------------------------------------------------------------------------------
**Configuration Volumes**
Configuration data from ConfigMaps and Secrets can also be passed to containers in the
form of mounted volumes. This will cause the configuration data to appear in files available to
the container file system.
Each top-level key in the configuration data will appear as a file containing all keys below that
top-level key.


~~~yml
[devops@rhel1 configMaps]$ cat volume-pod.yml 
apiVersion: v1
kind: Pod
metadata:
  name: volume-pod
spec:
  containers:
  - name: busybox
    image: busybox
    command: ['sh', '-c', 'while true; do sleep 3600; done']
    volumeMounts:
    - name: configmap-volume
      mountPath: /etc/config/configmap
    - name: secret-volume
      mountPath: /etc/config/secret  
  volumes:
  - name: configmap-volume
    configMap:
      name: my-configmap
  - name: secret-volume
    secret:
      secretName: my-secret

~~~
~~~sh
[devops@rhel1 configMaps]$ vim volume-pod.yml
[devops@rhel1 configMaps]$ kubectl create -f volume-pod.yml 
pod/volume-pod created
[devops@rhel1 configMaps]$ kubectl get pods
NAME                            READY   STATUS    RESTARTS   AGE
my-deployment-6d69b4dd5-274vl   1/1     Running   0          16h
my-deployment-6d69b4dd5-2n2rq   1/1     Running   0          16h
my-deployment-6d69b4dd5-j8chw   1/1     Running   0          14h
my-deployment-6d69b4dd5-xmsrn   1/1     Running   0          14h
volume-pod                      1/1     Running   0          16s


[devops@rhel1 configMaps]$ kubectl exec volume-pod -- ls /etc/config/configmap
key1
key2

[devops@rhel1 configMaps]$ kubectl exec volume-pod -- cat /etc/config/configmap/key1
Hello, world!
[devops@rhel1 configMaps]$ kubectl exec volume-pod -- cat /etc/config/configmap/key2
Test
multiple lines
more lines

[devops@rhel1 configMaps]$ kubectl exec volume-pod -- ls /etc/config/secret
secretkey1
secretkey2

[devops@rhel1 configMaps]$ kubectl exec volume-pod -- cat /etc/config/secret/secretkey1
secret
[devops@rhel1 configMaps]$ kubectl exec volume-pod -- cat /etc/config/secret/secretkey2
anothersecret
~~~
-----------------------------------------------------------------------------------------------------
## LAB
You are working for BeeBox, a company that provides regular shipments of bees to customers. The company is working on deploying some applications to a Kubernetes cluster.

One of these applications is a simple Nginx web server. This server is used as part of a secure backend application, and the company would like it to be configured to use HTTP basic authentication.

This will require an htpasswd file as well as a custom Nginx config file. In order to deploy this Nginx server to the cluster with good configuration practices, you will need to load the custom Nginx configuration from a ConfigMap (this already exists) and use a Secret to store the htpasswd data.

Create a Pod with a container running the nginx:1.19.1 image. Supply a custom Nginx configuration using a ConfigMap, and populate an htpasswd file using a Secret.

htpasswd is already installed on the server, and you can generate an htpasswd file like so:

htpasswd -c .htpasswd user
A pod called busybox already exists in the cluster, which you can use to contact your Nginx pod and test your setup.

> Generate an `htpasswd` File and Store It as a Secret

Use htpasswd to generate an htpasswd file.

Create a secret called nginx-htpasswd, and store the contents of the htpasswd file in that Secret. Delete the htpasswd file once the Secret is created.


> Create the Nginx Pod

Create a pod with a single container using the nginx:1.19.1 image.

The Nginx configuration is stored in an existing ConfigMap called nginx-config. Mount the ConfigMap to /etc/nginx in your pod.

Mount your htpasswd secret to /etc/nginx/conf within your pod. The htpasswd data should be in a file in the container at /etc/nginx/conf/.htpasswd.

Expose containerPort 80 on the Nginx container so you can communicate with it to test your setup.



~~~sh
cloud_user@k8s-control:~$ htpasswd -c .htpasswd user
New password:
Re-type new password:
Adding password for user user
cloud_user@k8s-control:~$ rm -rf .htpassword
cloud_user@k8s-control:~$ ll
total 48
drwxr-xr-x 7 cloud_user cloud_user 4096 Nov 29 20:52 ./
drwxr-xr-x 4 root       root       4096 Jul  7  2020 ../
drwx------ 3 cloud_user cloud_user 4096 Feb  1  2022 .ansible/
-rw-r--r-- 1 cloud_user cloud_user    9 Jul  6 20:57 .bash_history
-rw-r--r-- 1 cloud_user cloud_user 3106 Jul 10  2020 .bashrc
drwx------ 2 cloud_user cloud_user 4096 Nov 29 20:49 .cache/
drwx------ 3 cloud_user cloud_user 4096 Dec 16  2021 .config/
-rw-rw-r-- 1 cloud_user cloud_user   43 Nov 29 20:52 .htpasswd
drwxr-xr-x 2 root       root       4096 Nov 29 19:27 .kube/
-rw-r--r-- 1 cloud_user cloud_user  161 Jul 10  2020 .profile
drwx------ 2 cloud_user cloud_user 4096 Nov 29 19:24 .ssh/
-rw-r--r-- 1 cloud_user cloud_user    0 Aug 20  2020 .sudo_as_admin_successful
-rw------- 1 cloud_user cloud_user  825 Feb  8  2022 .viminfo
cloud_user@k8s-control:~$ cat .htpasswd
user:$apr1$ROHGDuIA$3bkIdd4GAGD2lW7DngY0n0
cloud_user@k8s-control:~$ kubectl create secret generic nginx-htpasswd --from-file .htpasswd
secret/nginx-htpasswd created
cloud_user@k8s-control:~$ rm .htpasswd
cloud_user@k8s-control:~$ vim pod.yml
cloud_user@k8s-control:~$ kubectl get cm
NAME               DATA   AGE
kube-root-ca.crt   1      101m
nginx-config       1      100m
cloud_user@k8s-control:~$ kubectl describe cm nginx-config
Name:         nginx-config
Namespace:    default
Labels:       <none>
Annotations:  <none>

Data
====
nginx.conf:
----
user  nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
  worker_connections  1024;
}
http {
    server {
        listen       80;
        listen  [::]:80;
        server_name  localhost;
        location / {
            root   /usr/share/nginx/html;
            index  index.html index.html;
        }
        auth_basic "Secure Site";
        auth_basic_user_file conf/.htpasswd;
    }
}


BinaryData
====

Events:  <none>
~~~

nginx.yml

~~~yml
apiVersion: v1
kind: Pod
metadata:
  name: nginx
spec:
  containers:
  - name: nginx
    image: nginx:1.19.1
    ports:
    - containerPort: 80
    volumeMounts:
    - name: config-volume
      mountPath: /etc/nginx
    - name: htpasswd-volume
      mountPath: /etc/nginx/conf
  volumes:
  - name: config-volume
    configMap:
      name: nginx-config
  - name: htpasswd-volume
    secret:
      secretName: nginx-htpasswd
~~~
~~~sh


cloud_user@k8s-control:~$ kubectl apply -f pod.yml
pod/nginx created
cloud_user@k8s-control:~$ kubectl get pods -o wide
NAME      READY   STATUS    RESTARTS   AGE    IP               NODE          NOMINATED NODE   READINESS GATES
busybox   1/1     Running   0          104m   192.168.194.65   k8s-worker1   <none>           <none>
nginx     1/1     Running   0          10s    192.168.194.69   k8s-worker1   <none>           <none>


cloud_user@k8s-control:~$ kubectl exec busybox -- curl 192.168.194.69
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100   179  100   179    0     0   121k      0 --:--:-- --:--:-- --:--:--  174k
<html>
<head><title>401 Authorization Required</title></head>
<body>
<center><h1>401 Authorization Required</h1></center>
<hr><center>nginx/1.19.1</center>
</body>
</html>


cloud_user@k8s-control:~$ kubectl exec busybox -- curl -u user:asdf1234 192.168.194.69
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0<!DOCTYPE html>
<html>
<head>
<title>Welcome to nginx!</title>
<style>
    body {
        width: 35em;
        margin: 0 auto;
        font-family: Tahoma, Verdana, Arial, sans-serif;
    }
</style>
</head>
<body>
<h1>Welcome to nginx!</h1>
<p>If you see this page, the nginx web server is successfully installed and
working. Further configuration is required.</p>

<p>For online documentation and support please refer to
<a href="http://nginx.org/">nginx.org</a>.<br/>
Commercial support is available at
<a href="http://nginx.com/">nginx.com</a>.</p>

<p><em>Thank you for using nginx.</em></p>
</body>
</html>
100   612  100   612    0     0   197k      0 --:--:-- --:--:-- --:--:--  298k
~~~
-------------------------------------------------------------------------------------------------------
# Resource Request
~~~yml
apiVersion: v1
kind: Pod
metadata:
  name: big-request-pod
spec:
  containers:
  - name: busybox
    image: busybox
    command: ['sh', '-c', 'while true; do sleep 3600; done']
    resources:
      requests:
        cpu: '10000m'
        memory: '128Mi'
~                         


[devops@rhel1 pods]$ cat resourceRequestPod.yml 
apiVersion: v1
kind: Pod
metadata:
  name: resource-pod
spec:
  containers:
  - name: busybox
    image: busybox
    command: ['sh', '-c', 'while true; do sleep 3600; done']
    resources:
      requests:
        cpu: '250m'
        memory: '128Mi'
      limits:
        cpu: '500m'
        memory: '256Mi'

~~~

