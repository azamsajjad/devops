# What Is a Namespace?
Namespaces are virtual clusters backed by the same physical cluster. Kubernetes
objects, such as pods and containers, live in namespaces. Namespaces are a way to
separate and organize objects in your cluster.
~~~bash
[devops@rhel1 ~]$ kubectl get namespaces
NAME              STATUS   AGE
default           Active   3h41m
kube-node-lease   Active   3h41m    ignore
kube-public       Active   3h41m    ignore
kube-system       Active   3h41m    kubeadm


[devops@rhel1 ~]$ kubectl get pods --namespace kube-system
NAME                                      READY   STATUS    RESTARTS   AGE
calico-kube-controllers-57b57c56f-p6fss   1/1     Running   0          3h24m
calico-node-f25w6                         0/1     Running   1          3h3m
calico-node-mnqqz                         0/1     Running   0          3h24m
coredns-787d4945fb-9pq5j                  1/1     Running   0          3h42m
coredns-787d4945fb-nv5v6                  1/1     Running   0          3h42m
etcd-rhel1                                1/1     Running   0          3h42m
kube-apiserver-rhel1                      1/1     Running   0          3h42m
kube-controller-manager-rhel1             1/1     Running   0          3h42m
kube-proxy-b7xnx                          1/1     Running   1          3h3m
kube-proxy-kqgrl                          1/1     Running   0          3h42m
kube-scheduler-rhel1                      1/1     Running   0          3h42m

[devops@rhel1 ~]$ kubectl get pods --all-namespaces
NAMESPACE     NAME                                      READY   STATUS    RESTARTS   AGE
kube-system   calico-kube-controllers-57b57c56f-p6fss   1/1     Running   0          3h28m
kube-system   calico-node-f25w6                         0/1     Running   1          3h6m
kube-system   calico-node-mnqqz                         0/1     Running   0          3h28m
kube-system   coredns-787d4945fb-9pq5j                  1/1     Running   0          3h45m
kube-system   coredns-787d4945fb-nv5v6                  1/1     Running   0          3h45m
kube-system   etcd-rhel1                                1/1     Running   0          3h45m
kube-system   kube-apiserver-rhel1                      1/1     Running   0          3h45m
kube-system   kube-controller-manager-rhel1             1/1     Running   0          3h45m
kube-system   kube-proxy-b7xnx                          1/1     Running   1          3h6m
kube-system   kube-proxy-kqgrl                          1/1     Running   0          3h45m
kube-system   kube-scheduler-rhel1                      1/1     Running   0          3h45m



You can create your own namespaces with kubectl.
$ kubectl create namespace my-namespace
~~~
-------------------------------------
kubectl get ns
kubectl get pods -n dev
kubectl get pods -A


---------------------------------------------------------------------------
# LABELS
to filter out pods among thousands of pods

~~~sh
[devops@rhel1 ~]$ kubectl run pod1 --image nginx --labels='env=prod'

[devops@rhel1 ~]$ kubectl run pod2 --image nginx --labels='env=dev,owner=rupert'
pod/pod2 created
[devops@rhel1 ~]$ kubectl run pod3 --image nginx --labels='env=dev,type=db'
pod/pod3 created
[devops@rhel1 ~]$ kubectl get pods
NAME                   READY   STATUS    RESTARTS   AGE
init-container-nginx   1/1     Running   0          3h50m
my-pod                 1/1     Running   0          3h30m
pod1                   1/1     Running   0          5m
pod2                   1/1     Running   0          41s
pod3                   1/1     Running   0          32s
[devops@rhel1 ~]$ kubectl get pods -l type=db
NAME   READY   STATUS    RESTARTS   AGE
pod3   1/1     Running   0          41s
[devops@rhel1 ~]$ kubectl get pods -l owner=rupert
NAME   READY   STATUS    RESTARTS   AGE
pod2   1/1     Running   0          62s
[devops@rhel1 ~]$ kubectl get pods -l env=prod
NAME   READY   STATUS    RESTARTS   AGE
pod1   1/1     Running   0          5m31s
~~~

~~~yml
[devops@rhel1 pods]$ cat labelsEnv.yml 
apiVersion: v1
kind: Pod
metadata: 
  name: labels-envar
  labels:
    purpose: demonstrate-errors
spec:
  containers:
    - name: envar-container
      image: gcr.io/google-samples/node-hello:1.0
      env:
        - name: WELCOME
          value: "Hello from the environment"
        - name: CKAEXAM
          value: "CKA exam version 1.18"


            # kubectl exec -it labels-envar -- /bin/bash
            # printenv
~~~