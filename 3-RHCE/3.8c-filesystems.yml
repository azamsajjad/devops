FILE_CONTENTs
---
- name: file,lineinfile,copy,replace
  hosts: node1
  tasks:
    - name: touch a new file
      file:
        path: /tmp/testfilecloud1
        state: touch
      tags: file1
    - name: add line with copy
      copy:
        content: added by copy module
        dest: /tmp/testfilecloud2
      tags: file2
    - name: line in file
      lineinfile:
        path: /tmp/testfilecloud3
        line: added by lineinfile module
        create: yes
      tags: file3

    - name: replace a line in testfile2
      replace:
        path: /tmp/testfilecloud2
        regexp: '^added.*$'             <--------------------------------------------------------
        replace: "line replaced by replace module"
    - name: replace a line in testfile3
      lineinfile:
        path: /tmp/testfilecloud3
        regexp: '.module$'              <--------------------------------------------------------
        line: "line replaced by lineinfile module"


"*******************************************************"      
[ansible@x230 automation]$ cat playbooks/rhcsa_archive.yml
---
- name: node1 archive
  hosts: node1
  become: yes
  tasks:
    - name: archive multiple files
      archive:
        path:
          - /home/rupert/archive/testdir/testfile2
          - /home/rupert/archive/testdir/testfile4
          - /home/rupert/archive/testdir/testfile6
        format: gz
        dest: /home/rupert/unarchive/multi/multifile.tgz
    - name: archive with wildcard
      archive:
        path: /home/rupert/archive/testdir/testfile*
        exclude_path:
          - /home/rupert/archive/testdir/testfile2
          - /home/rupert/archive/testdir/testfile4
        format: gz
        dest: /home/rupert/unarchive/glob/globexclude.tgz
    - name: archive a directory
      archive:
        path: /home/rupert/archive/testdir
        format: gz
        dest: /home/rupert/unarchive/dir/dir.tgz

[ansible@x230 automation]$ cat playbooks/rhcsa_unarchive.yml
---
- name: unarchive
  become: true
  hosts: node1
  tasks:
    - name: unarchive multifile
      unarchive:
        src: /home/rupert/unarchive/multi/multifile.tgz
        dest: /home/rupert/unarchive/multi
        remote_src: yes
    - name: unpack globexclude.tgz
      unarchive:
        src: /home/rupert/unarchive/glob/globexclude.tgz
        dest: /home/rupert/unarchive/glob
        remote_src: yes
    - name: unpack dir.tgz
      unarchive:
        src: /home/rupert/unarchive/dir/dir.tgz
        dest: /home/rupert/unarchive/dir
        remote_src: yes
    - name: transfer playbooks
      unarchive:
        src: /home/ansible/automation/playbooks.tgz
        dest: /home/rupert/
        remote_src: no
"*******************************************************"

$ parted 
->print
->mklabel msdos<->gpt (change b/w fdisk and gdisk)
->mkpart 
->q
partprobe
[you can make gpt partitions using fdisk
fdisk
->m ->g ->n]

AD_HOC
1019  ansible node1 -m raw -a 'echo -e "n\np\n2\n\n+2G\nw" | sudo fdisk /dev/nvme0n5'
 1020  ssh 101
 1021  ansible node1 -m command -a 'sudo partprobe /dev/nvme0n5'
 1023  ansible node1 -m command -a 'sudo lsblk'
 1024  # ansible node1 -m command -a 'sudo mkfs.xfs /dev/nvme0n5p2'
 1025  ansible node1 -m filesystem -a 'dev=/dev/nvme0n5p2 fstype=xfs state=present force=true' -b
 1027  ansible node1 -m command -a 'ls -alh /'
 1029  # ansible node1 -m command -a 'sudo mount /dev/nvme0n5p2 /datanvme5'
 1030  ansible node1 -m command -a 'sudo mount /dev/nvme0n5p2 /datanvme5'
 1034  ansible node1 -m command -a 'df -hT'
 1035  ansible node1 -m lineinfile -a 'path=/etc/fstab line="/dev/nvme0n5p2 /datanvme5 xfs defaults 0 0" state=present'
 1036  ansible node1 -m lineinfile -a 'path=/etc/fstab line="/dev/nvme0n5p2 /datanvme5 xfs defaults 0 0" state=present' -b
 1037  ansible node1 -m command -a 'sudo cat /etc/fstab'
 1038  ansible node1 -m command -a 'sudo mount -a'
 1039  ansible node1 -m lineinfile -a 'path=/etc/fstab line="/dev/nvme0n5p2 /datanvme5 xfs defaults 0 0" state=absent' -b
 1040  ansible-doc lineinfile
 1041  ansible node1 -m command -a 'sudo mount -a'
 1042  ansible node1 -m command -a 'sudo cat /etc/fstab'
 1043  ansible node1 -m mount -a 'path=/datanvme5 src=/dev/nvme0n5p2 fstype=xfs opts=rw state=present' -b
 1046  ansible node1 -m mount -a 'path=/datanvme5 src=/dev/nvme0n5p2 fstype=xfs opts=rw state=mounted' -b
 1047  ansible node1 -m command -a 'sudo umount /datanvme5'
 1048  ansible node1 -m command -a 'df -hT'
 1049  ansible node1 -m mount -a 'path=/datanvme5 src=/dev/nvme0n5p2 fstype=xfs opts=rw state=absent' -b

 1057  ansible node1 -m raw -a 'echo -e "d\n2\nw" | sudo fdisk /dev/nvme0n5'
 1058  ansible node1 -m command -a 'lsblk'


PLAYBOOKS 
[ansible@x230 automation]$ ls -alh playbooks/rhcsa_parted*
-rw-r--r--. 1 ansible ansible 201 Jul  8 18:03 playbooks/rhcsa_parted_fs_blank.yml
-rw-r--r--. 1 ansible ansible 260 Jul  8 18:00 playbooks/rhcsa_parted_fs.yml
-rw-r--r--. 1 ansible ansible 334 Jul  8 17:54 playbooks/rhcsa_parted_gpt.yml
-rw-r--r--. 1 ansible ansible 402 Jul  8 17:44 playbooks/rhcsa_parted_last.yml
-rw-r--r--. 1 ansible ansible 269 Jul  8 17:25 playbooks/rhcsa_parted_lvm.yml
-rw-r--r--. 1 ansible ansible 249 Jul  8 18:21 playbooks/rhcsa_parted_mount1.yml
-rw-r--r--. 1 ansible ansible 262 Jul  8 18:32 playbooks/rhcsa_parted_mount_smb.yml
-rw-r--r--. 1 ansible ansible 249 Jul  8 18:21 playbooks/rhcsa_parted_mount.yml
-rw-r--r--. 1 ansible ansible 219 Jul  8 18:08 playbooks/rhcsa_parted_uuid.yml
-rw-r--r--. 1 ansible ansible 184 Jul  8 17:18 playbooks/rhcsa_parted.yml
[ansible@x230 automation]$ cat playbooks/rhcsa_parted*
---
- name: create gpt partition
  hosts: node1
  become: true
  tasks:
    - name: Blank filesystem signature on /dev/nvme0n5p1
      filesystem:
        device: /dev/nvme0n5p1
        state: absent

---
- name: create gpt partition
  hosts: node1
  become: true
  tasks:
    - name: Create ext2 fs on /dev/nvme0n5
      filesystem:
        fstype: ext2
        dev: /dev/nvme0n5p1
        force: true
...
# force wipes and overwrites any previous filesystems
---
- name: create gpt partition
  hosts: node1
  become: true
  tasks:
    - name: create gpt partition of 1Gb on a 10Gb disk
      parted:
        label: gpt
        state: present
        device: /dev/nvme0n5
        number: 6
        name: p1
        flags: [ lvm ]
        part_start: 0%
        part_end: 10%
        unit: '%'

---
- name: delete old partition and create new
  hosts: node1
  become: true
  tasks:
    - name: delete old partition
      parted:
        device: /dev/nvme0n5
        number: 2
        state: absent
    - name: Create new partition with a size of 2GiB at disk's end
      parted:
        device: /dev/nvme0n5
        number: 2
        state: present
        fs_type: ext3
        part_start: -1GiB

Device         Boot    Start      End Sectors Size Id Type
/dev/nvme0n5p1          2048  6291455 6289408   3G 83 Linux
/dev/nvme0n5p2      18874368 20971519 2097152   1G 83 Linux

---
- name: parted for lvm
  hosts: node1
  become: true
  tasks:
    - name: create new partition for future lvm
      parted:
        device: /dev/nvme0n5
        number: 2
        flags: [ lvm ]
        state: present
        part_start: 3GiB
        part_end: 4GiB
---
- name: create gpt partition
  hosts: node1
  become: true
  tasks:
    - name: Mount DVD Read-Only
      mount:
        path: /tmp
        src: /dev/sr0
        fstype: iso9660 #standard fstype for cdrom
        opts: ro
        state: mounted


- name: Mount Ephemeral SMB Vloume
  mount:
    src: //192.168.100.101/share
    path: /mnt/smb
    opts: "rw,vers=3,file_mode=0600,dir_mode=0700,dom={{ ad_domain }},username={{ ad_username }},password={{ ad_passwod }}"
    fstype: cifs
    state: ephemeral




---
- name: create gpt partition
  hosts: node1
  become: true
  tasks:
    - name: Mount DVD Read-Only
      mount:
        path: /tmp
        src: /dev/sr0
        fstype: iso9660 #standard fstype for cdrom
        opts: ro
        state: mounted
---
- name: create gpt partition
  hosts: node1
  become: true
  tasks:
    - name: set/reset xfs filesystem uuid on /dev/nvme0n5
      filesystem:
        fstype: xfs
        dev: /dev/nvme0n5p1
        uuid: generate
---
- name: create a parted of 3gb on nvme0n5 node1
  hosts: node1
  tasks:
    - parted:
        device: /dev/nvme0n5
        number: 2
        state: present
        part_end: 3GiB




rhcsa_parted_loop.yml
---
- name: create 2 partitions for lvm vol
  hosts: node1
  become: yes
  tasks:
    - name: Create Partitions
      parted:
        device: "{{ item }}"
        number: 1
        part_end: 2GiB
        label: msdos
        flags: [lvm]
      loop:
        - /dev/nvme0n6
        - /dev/nvme0n7
    - name: Create Volume Group
      lvg:
        pvs: /dev/nvme0n6p1,/dev/nvme0n7p1
        vg: vg.ansible
        state: present
    - name: Create Logical volume
      lvol:
        vg: vg.ansible
        lv: lv.ansible
        size: 512m
        state: present

rhcsa_parted_loop_fs_mount.yml
---
- name: create fs and mount it
  hosts: node1
  tasks:
    - name: create ext4 filesystem on logical volume
      filesystem:
        dev: /dev/vg.ansible/lv.ansible
        fstype: ext4
    - name: mounting it
      mount:
        path: /mnt/test_mount
        src: /dev/vg.ansible/lv.ansible
        fstype: ext4
        state: mounted
        backup: yes
~


LVM 

 151  ansible node1 -m raw -a 'echo -e "n\np\n1\n\n+5G\nw" | sudo fdisk /dev/nvme0n5' -b
  152  ansible node1 -m command -a 'lsblk'
  153  ansible node1 -m lvg -a 'vg=ansible.vg pvs=/dev/nvme0n5p1 pesize=32' -b
  154  ansible node1 -m command -a 'lsblk'
  155  ansible node1 -m command -a 'lvs' -b
  156  ansible node1 -m command -a 'vgs' -b
  157  ssh 101
  158  ansible node1 -m command -a 'vgs' -b
  159  ansible node1 -m lvol -a 'vg=ansible.vg lv=ansible.lv size=100m' -b
  160  ansible node1 -m command -a 'lvs' -b
  161  ansible node1 -m command -a 'lsblk' -b
  162  ansible node1 -m command -a 'lvdisplay' -b
  163  ansible node1 -m filesystem -a 'dev=/dev/ansible.vg/ansible.lv fstype=ext4 state=present' -b
  164  ansible node1 -m command -a 'lsblk -f' -b
  165  ansible node1 -m mount -a 'path=/mnt/ansiblelvm src=/dev/ansible.vg/ansible.lv fstype=ext4 opts=defaults state=mounted' -b
  166  ansible node1 -m command -a 'cat /etc/fstab' -b
  167  ansible node1 -m command -a 'df -hT' -b
  168  ansible node1 -m lvol -a 'vg=ansible.vg lv=ansible.lv size=+1G resizefs=true' -b
  169  ansible node1 -m command -a 'df -hT' -b
  170  ansible node1 -m lvol -a 'vg=ansible.vg lv=ansible.lv state=absent force=true' -b
  171  ansible node1 -m mount -a 'path=/mnt/ansiblelvm src=/dev/ansible.vg/ansible.lv fstype=ext4 opts=defaults state=absent' -b
  172  ansible node1 -m command -a 'df -hT' -b
  173  ansible node1 -m lvol -a 'vg=ansible.vg lv=ansible.lv state=absent force=true' -b


[ansible@x230 automation]$ vim playbooksr/rhcsa_parted_lvm1.yml
---
- name: create partition
  hosts: node1
  become: true
  tasks:
    - name: create new partition with size of 1GiB
      parted:
        device: /dev/nvme0n5
        number: 1
        state: present
        part_end: 1GiB
    - name: volume group
      lvg:
        vg: ansible-vg
        pvs: /dev/nvme0n5p1
        pesize: 32
- name: create a volume group on /dev/nvme0n5 with p extent size od 128KiB
  hosts: node1
  become: true
  tasks:
    - name: create new partition on /dev/nvme0n5
      parted:
        device: /dev/nvme0n5
        number: 2
        state: present
        part_start: 1GiB
        part_end: 2GiB
    - name: vgs
      lvg:
        vg: ansible-vg2
        pvs: /dev/nvme0n5p2
        pesize: 128K
- name: another
  hosts: node1
  become: true
  tasks:
    - name: create new partition
      parted:
        device: /dev/nvme0n5
        part_start: 2GiB
        part_end: 3GiB
        state: present
        flags: [lvm]
        number: 3
    - name: vgs
      lvg:
        vg: ansible-vg2
        pvs: /dev/nvme0n5p3,/dev/nvme0n5p2
        pvresize: true
        reset_vg_uuid: true
      tags: vgs

- name: Now create Logical volumes
  hosts: node1
  become: true
  tasks:
    - name: create logical volume
      lvol:
        vg: ansible-vg
        lv: ansible-lvcache
        size: 512m
        opts: --type cache-pool
      
    - name: Create logical volume
      lvol:
        vg: ansible-vg
        lv: ansible-lv
        size: +100%FREE
      tags: vgs
    - name: Create lvm with Read Ahead Sectors - Read ahead is system call of Linux kernel that loads file's contents into the page cache - default is 256
      lvol:
        vg: ansible-vg2
        lv: ansible-lv2
        size: 100
        opts: -r 16
      tags: vgs
    - name: delete lvm
      lvol:
        vg: ansible-vg2
        lv: ansible-lv2
        state: absent
        force: true
      tags: vgs
    - name: make lvm percentage of vg size
      lvol:
        vg: ansible-vg
        lv: ansible-lvcache
        size: 20%VG
        force: true
    - name: make lvm percentage of vg size
      lvol:
        vg: ansible-vg
        lv: ansible-lv
        size: 20%VG
        force: true
    - name: Amazing feature of lvm . Take snapshots of logical volumes as backups
      lvol:
        vg: ansible-vg
        lv: ansible-lv
        snapshot: snap1
        size: 50m
    - name: Make LVM inactive - can be confirmed with LVSCAN Command
      lvol:
        vg: ansible-vg
        lv: ansible-lv
        active: false
        force: true


    - name: Create thin Provisioned LVMs - took place of VDO (RHEL8) - first we need to create a thinpool e.g. of 100mb over a volume group. lvm can then be provisioned over thinpool with sizes 5 or 6 time the size of thin pool
      lvol:
        vg: ansible-vg
        thinpool: ansiblepool
        size: 150m
      tags: snap

    - name: create LVM of more size than what is available
      lvol:
        vg: ansible-vg
        lv: ansible-lvpool
        thinpool: ansiblepool
        size: 900m
      tags: snap
