no need to individually curl 50 nodes to check webserver status

[ansible@x230 automation]$ vim playbooks/host_delegation.yml
---
- name: host_delegation
  hosts: node1
  tasks:
    - name: check apache web server hosted on node1
      uri:
        url: http://{{ inventory_hostname }}
        method: GET
        status_code: 200
        timeout: 30
        return_content: yes
      delegate_to: localhost
      register: webresult
    - name: debug
      debug:
        var: "{{ webresult }}"

# ~
# TASK [debug]
# ok: [node1] => {
#     "webresult": {
#         "accept_ranges": "bytes",
#         "changed": false,
#         "connection": "close",
#         "content": "<html>\n<center><h1>*** Apache Webserver Hosted on server1 ***</h1></center>\n</html>\n",
#         "content_length": "84",
#         "content_type": "text/html; charset=UTF-8",
#         "cookies": {},
#         "cookies_string": "",
#         "date": "Sun, 16 Jul 2023 18:40:21 GMT",
#         "elapsed": 0,
#         "etag": "\"54-5fffb2eeba586\"",
#         "failed": false,
#         "last_modified": "Sat, 08 Jul 2023 15:12:52 GMT",
#         "msg": "OK (84 bytes)",
#         "redirected": false,
#         "server": "Apache/2.4.53 (Red Hat Enterprise Linux)",
#         "status": 200,
#         "url": "http://node1"
#     }
# }



#[*******************************************************]
#Modify the Provided Playbook to Filter Packages Based on Tags

#The provided playbook doesn't have any tags in it, so if it's run as is, unneeded software will be installed on the servers. Add tags so that tasks can be filtered based on which group is being targeted.

#Add a Conditional for Web Services to Restart if an Index Is Modified
#There is a vendor requirement to restart Apache services if the index.html is modified. Build that into the provided playbook.

#Add a Task That Has the Local Ansible Host Verify the Web Server Is Working
#There is a firewall in place that we want to ensure isn't blocking traffic on the web server. Verify from the Ansible host that pages load correctly.
---
- hosts: all
  become: yes

  tasks:
    - name: Install Apache on Webservers
      yum:
        state: present
        name: httpd
      tags: yum

    - name: Install CSH on Backup servers (required per vendor)
      yum:
        state: present
        name: csh
      tags: csh

    - name: Configure /var/www/html/index.html
      copy:
        dest: "/var/www/html/index.html"
        content: |
          This is your new website content.
          Please replace this with the actual content from the developers before going production.
      notify: "restart apache"

    - name: Create backup software directory (Per vendor, directory must exist before software is installed)
      file:
        dest: "/opt/backup"
        state: directory
      tags: streams

    - name: Configure backup streams (Per vendor, file must exist before software is installed)
      copy:
        dest: "/opt/backup/streams"
        content: "192"
      tags: streams

    - name: verify webserver is working
      uri:
        url: http://{{ inventory_hostname }}
        method: GET
        status_code: 200
        return_content: yes
      delegate_to: localhost
      register: verify

    - debug:
        var: verify

  handlers:
    - name: Restart apache
      service:
        name: httpd
        state: restarted
        enabled: true
      listen: "restart apache"


#OROROROROROROROROROROROROROROROROROR instead of using handler, you can use a variable 
---
- name: #Configure /var/www/html/index.html
      copy:
        dest: "/var/www/html/index.html"
        content: |
          This is your new website content.
          Please replace this with the actual content from the developers before going production.
      register: statuschange
---      
- name: #Restart apache
      service:
        name: httpd
        state: restarted
        enabled: true
      when: statuschange.changed

#This task will only run if the task above it changes something


DELEGATE_TO
task will only run on the delegated host, not all hosts

---
- name: using delegate keyword with async and poll
  hosts: vmservers
  tasks:
    - name: create scripts directory
      file:
        path: /home/rupert/scripts
        state: directory
    - name: copy script
      copy:
        src: ~/automation/scripts/async_sleep.sh
        dest: /home/rupert/scripts/async_sleep.sh
        owner: rupert
        group: rupert
        mode: 0770
    - name: run ~/scripts/async_sleep.sh
      command: ~/scripts/async_sleep.sh
      async: 60
      poll: 11
      delegate_to: server2
    - name: install elinks
      yum:
        name: elinks
        state: present
      become: yes
