{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "VisualEditor10",
            "Effect": "Allow",
            "Action": "s3:ListBucket",
            "Resource": [
                "arn:aws:s3:::corp-582908443542-1bdf1460"
            ],
            "Condition": {
                "StringLike": {
                    "s3:prefix": [
                        "",
                        "${aws:username}*"
                    ]
                }
            }
        },
        {
            "Sid": "VisualEditor1",
            "Effect": "Allow",
            "Action": [
                "s3:PutObject",
                "s3:GetObject",
                "s3:DeleteObject*"
            ],
            "Resource": "arn:aws:s3:::corp-582908443542-1bdf1460/${aws:username}*"
        },
        {
            "Sid": "VisualEditor2",
            "Effect": "Allow",
            "Action": "s3:GetBucketLocation",
            "Resource": "arn:aws:s3:::*"
        },
        {
            "Sid": "VisualEditor3",
            "Effect": "Allow",
            "Action": "s3:ListAllMyBuckets",
            "Resource": "*"
        }
    ]
}
===================================================================================================================
ENSURE COMPLIANCE BY USING SYSTEMS MANAGER AUTOMATION DOCUMENT AND AWS CONFIG.
Create a Lambda Function:
"""
This lambda function reviews tags in all the instance and 
Updates the required tags
"""

import json
import sys
import os
import os
import boto3
import base64
from botocore.exceptions import ClientError
import logging

# It is a good practice to use proper logging.
# Here we are using the logging module of python.
# https://docs.python.org/3/library/logging.html

logger = logging.getLogger()
logger.setLevel(logging.INFO)

def lambda_handler(event, context):
    logger.info(event)
    
    client = boto3.client('sts')
    response_account = client.get_caller_identity()['Account']
    
    instance = event
    resourse_ARN = f"arn:aws:ec2:us-east-1:{response_account}:instance/{instance}"
    logger.info(resourse_ARN)
    
    
    tag_client = boto3.client('resourcegroupstaggingapi')
    try:
        response_tag = tag_client.tag_resources(
                 ResourceARNList=[
                     resourse_ARN,
                 ],
                 Tags={
                    'Environment':'Prod'
                 }
                     )
        print(response_tag)
    except Exception as exp:
        logger.exception(exp)
        
    return {
        "compliance_type": "COMPLIANT",
        "annotation": "This resource is compliant with the rule."
    }



goto SystemsManager->ChangeManagement->Automation->CreateAutomationDocument
// description: |-
//   *Use this SSM automation document to remediate ec2 instance that have not been properly tagged.*  

//   ---
//   # How does it work?
//   This SSM automation doc will invoke the lambda function labFunction that will add tags to instances.
//   The lambda function will tag any non-compliant EC2 resources with the Environment:Prod key value pair
//   ## Pre-requisites
//   1. Make sure to replace <account-id> with the actual account id of your provisioned lab account.
 

//   You can create a [link to another webpage](https://aws.amazon.com/).
// schemaVersion: '0.3'
// parameters:
//   instanceId:
//     type: 'AWS::EC2::Instance::Id'
// mainSteps:
//   - name: updatetags
//     action: 'aws:invokeLambdaFunction'
//     inputs:
//       InvocationType: Event
//       Payload: '"{{instanceId}}"'
//       FunctionName: 'arn:aws:lambda:us-east-1:<account-id>:function:labFunction'

Goto AWSConfig->CreateRecorder->then add Rule->Then Remidiation
Concept
AWS Config uses the configuration recorder to detect changes in your resource configu rations and capture these changes as configuration iten•s. You must create a configu ration recorder before AWS Config can track your resource configurations.

--->Remediation action details
    The execution of remediation actions is achieved using AWS Systems Manager Automation
--->Select CreatedAutomationDocument

Choose remediation action
*Use this SSM automation document to remediate ec2 instance that have not been properly tagged.* --- # How does it work? This SSM automation doc will invoke the lambda function labFunction that will add tags to instances. The lambda function will tag any non-compliant EC2 resources with the Environment:Prod key value pair 

=============================================================================
DIY: Check compliance more :
Create a Lambda Function for REMEDIATION:
"""
This lambda function reviews instance profiles and replaces them with default
"""

import json
import sys
import os
import boto3
import base64
from botocore.exceptions import ClientError
import logging

# It is a good practice to use proper logging.
# Here we are using the logging module of python.
# https://docs.python.org/3/library/logging.html

logger = logging.getLogger()
logger.setLevel(logging.INFO)

ec2_client = boto3.client('ec2')

def lambda_handler(event, context):

    instance = event
    logger.info(instance)

    try:
        response = ec2_client.associate_iam_instance_profile(
            IamInstanceProfile={
                'Name': 'LabInstanceProfile'
            },
            InstanceId=instance
        )    
        logger.info(response)
        return {
            "compliance_type": "COMPLIANT",
            "annotation": "This resource is compliant with the rule."
        }    
    except Exception as exp:
        logger.exception(exp)


goto SystemsManager->ChangeManagement->Automation->CreateAutomationDocument
// description: |-
//   *Use this SSM automation document to remediate ec2 instance that do not have the standard EC2 instance profile attached.*  

//   ---
//   # How does it work?
//   This SSM automation doc will invoke the lambda function labFunction-DIY that will add tags to instances.
//   The lambda function will then replace the existing instance profile associated with the default ec2_base_role.
//   ## Pre-requisites

//   1. Make sure to replace <account-id> with the actual account id of your provisioned lab account.

//   You can create a [link to another webpage](https://aws.amazon.com/).
// schemaVersion: '0.3'
// parameters:
//   instanceId:
//     type: 'AWS::EC2::Instance::Id'
// mainSteps:
//   - name: updateInstanceProfile
//     action: 'aws:invokeLambdaFunction'
//     inputs:
//       InvocationType: Event
//       Payload: '"{{instanceId}}"'
//       FunctionName: 'arn:aws:lambda:us-east-1:<account-id>:function:labFunction-DIY'


ec2-instance-profile-attached   <---APPLY THIS RULE IN aws config


=========================================================================================================
A company is running an e-commerce application on an Amazon EC2 instance. A newly hired developer has been tasked to monitor and handle the necessary updates on the EC2 instance every Saturday. The developer is working from home and needs remote access to the webserver. As the system administrator, you’re looking to use the AWS STS API to give the developer temporary credentials and enforce Multi-factor Authentication (MFA) to protect specific programmatic calls against the instance that could adversely affect the server.

Which of the following STS API should you use?

(view)	1	0	1	00:03:22	
 AssumeRoleWithWebIdentity
 AssumeRoleWithSAML
 GetFederationToken
 GetSessionToken
AWS Security Token Service (AWS STS) is a web service that enables you to request temporary, limited-privilege credentials for AWS Identity and Access Management (IAM) users or for users that you authenticate (federated users).



Below is the summary of the available STS API:

AssumeRole -  is useful for allowing existing IAM users to access AWS resources that they don't already have access to. For example, the user might need access to resources in another AWS account. It is also useful as a means to temporarily gain privileged access—for example, to provide multi-factor authentication (MFA). You must call this API using existing IAM user credentials.

AssumeRoleWithWebIdentity - returns a set of temporary security credentials for federated users who are authenticated through a public identity provider. Examples of public identity providers include Login with Amazon, Facebook, Google, or any OpenID Connect (OIDC)-compatible identity provider.

AssumeRoleWithSAML -  returns a set of temporary security credentials for federated users who are authenticated by your organization's existing identity system. The users must also use SAML 2.0 (Security Assertion Markup Language) to pass authentication and authorization information to AWS. This API operation is useful in organizations that have integrated their identity systems (such as Windows Active Directory or OpenLDAP) with software that can produce SAML assertions.

GetFederationToken - returns a set of temporary security credentials (consisting of an access key ID, a secret access key, and a security token) for a federated user. A typical use is in a proxy application that gets temporary security credentials on behalf of distributed applications inside a corporate network. You must call the GetFederationToken operation using the long-term security credentials of an IAM user.

GetSessionToken - returns a set of temporary security credentials to an existing IAM user. This is useful for providing enhanced security, such as allowing AWS requests only when MFA is enabled for the IAM user. Because the credentials are temporary, they provide enhanced security when you have an IAM user who accesses your resources through a less secure environment.

All of the options given provide temporary credentials to make API calls against AWS resources, but GetSessionToken is the only API that supports MFA. Hence, the correct answer is GetSessionToken.

--------------------
The AWS STS DecodeAuthorizationMessage API decodes additional information about the authorization status of a request from an encoded message returned in response to an AWS request.

For example, if a user is not authorized to perform an operation that he or she has requested, the request returns a Client.UnauthorizedOperation response (an HTTP 403 response). Some AWS operations additionally return an encoded message that can provide details about this authorization failure.

The message is encoded because the details of the authorization status can constitute privileged information that the user who requested the operation should not see. To decode an authorization status message, a user must be granted permissions via an IAM policy to request the DecodeAuthorizationMessage (sts:DecodeAuthorizationMessage) action.