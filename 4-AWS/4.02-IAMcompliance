{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "VisualEditor10",
            "Effect": "Allow",
            "Action": "s3:ListBucket",
            "Resource": [
                "arn:aws:s3:::corp-582908443542-1bdf1460"
            ],
            "Condition": {
                "StringLike": {
                    "s3:prefix": [
                        "",
                        "${aws:username}*"
                    ]
                }
            }
        },
        {
            "Sid": "VisualEditor1",
            "Effect": "Allow",
            "Action": [
                "s3:PutObject",
                "s3:GetObject",
                "s3:DeleteObject*"
            ],
            "Resource": "arn:aws:s3:::corp-582908443542-1bdf1460/${aws:username}*"
        },
        {
            "Sid": "VisualEditor2",
            "Effect": "Allow",
            "Action": "s3:GetBucketLocation",
            "Resource": "arn:aws:s3:::*"
        },
        {
            "Sid": "VisualEditor3",
            "Effect": "Allow",
            "Action": "s3:ListAllMyBuckets",
            "Resource": "*"
        }
    ]
}
===================================================================================================================
ENSURE COMPLIANCE BY USING SYSTEMS MANAGER AUTOMATION DOCUMENT AND AWS CONFIG.
Create a Lambda Function:
"""
This lambda function reviews tags in all the instance and 
Updates the required tags
"""

import json
import sys
import os
import os
import boto3
import base64
from botocore.exceptions import ClientError
import logging

# It is a good practice to use proper logging.
# Here we are using the logging module of python.
# https://docs.python.org/3/library/logging.html

logger = logging.getLogger()
logger.setLevel(logging.INFO)

def lambda_handler(event, context):
    logger.info(event)
    
    client = boto3.client('sts')
    response_account = client.get_caller_identity()['Account']
    
    instance = event
    resourse_ARN = f"arn:aws:ec2:us-east-1:{response_account}:instance/{instance}"
    logger.info(resourse_ARN)
    
    
    tag_client = boto3.client('resourcegroupstaggingapi')
    try:
        response_tag = tag_client.tag_resources(
                 ResourceARNList=[
                     resourse_ARN,
                 ],
                 Tags={
                    'Environment':'Prod'
                 }
                     )
        print(response_tag)
    except Exception as exp:
        logger.exception(exp)
        
    return {
        "compliance_type": "COMPLIANT",
        "annotation": "This resource is compliant with the rule."
    }



goto SystemsManager->ChangeManagement->Automation->CreateAutomationDocument
// description: |-
//   *Use this SSM automation document to remediate ec2 instance that have not been properly tagged.*  

//   ---
//   # How does it work?
//   This SSM automation doc will invoke the lambda function labFunction that will add tags to instances.
//   The lambda function will tag any non-compliant EC2 resources with the Environment:Prod key value pair
//   ## Pre-requisites
//   1. Make sure to replace <account-id> with the actual account id of your provisioned lab account.
 

//   You can create a [link to another webpage](https://aws.amazon.com/).
// schemaVersion: '0.3'
// parameters:
//   instanceId:
//     type: 'AWS::EC2::Instance::Id'
// mainSteps:
//   - name: updatetags
//     action: 'aws:invokeLambdaFunction'
//     inputs:
//       InvocationType: Event
//       Payload: '"{{instanceId}}"'
//       FunctionName: 'arn:aws:lambda:us-east-1:<account-id>:function:labFunction'

Goto AWSConfig->CreateRecorder->then add Rule->Then Remidiation
Concept
AWS Config uses the configuration recorder to detect changes in your resource configu rations and capture these changes as configuration itenâ€¢s. You must create a configu ration recorder before AWS Config can track your resource configurations.

--->Remediation action details
    The execution of remediation actions is achieved using AWS Systems Manager Automation
--->Select CreatedAutomationDocument

Choose remediation action
*Use this SSM automation document to remediate ec2 instance that have not been properly tagged.* --- # How does it work? This SSM automation doc will invoke the lambda function labFunction that will add tags to instances. The lambda function will tag any non-compliant EC2 resources with the Environment:Prod key value pair 

=============================================================================
DIY: Check compliance more :
Create a Lambda Function for REMEDIATION:
"""
This lambda function reviews instance profiles and replaces them with default
"""

import json
import sys
import os
import boto3
import base64
from botocore.exceptions import ClientError
import logging

# It is a good practice to use proper logging.
# Here we are using the logging module of python.
# https://docs.python.org/3/library/logging.html

logger = logging.getLogger()
logger.setLevel(logging.INFO)

ec2_client = boto3.client('ec2')

def lambda_handler(event, context):

    instance = event
    logger.info(instance)

    try:
        response = ec2_client.associate_iam_instance_profile(
            IamInstanceProfile={
                'Name': 'LabInstanceProfile'
            },
            InstanceId=instance
        )    
        logger.info(response)
        return {
            "compliance_type": "COMPLIANT",
            "annotation": "This resource is compliant with the rule."
        }    
    except Exception as exp:
        logger.exception(exp)


goto SystemsManager->ChangeManagement->Automation->CreateAutomationDocument
// description: |-
//   *Use this SSM automation document to remediate ec2 instance that do not have the standard EC2 instance profile attached.*  

//   ---
//   # How does it work?
//   This SSM automation doc will invoke the lambda function labFunction-DIY that will add tags to instances.
//   The lambda function will then replace the existing instance profile associated with the default ec2_base_role.
//   ## Pre-requisites

//   1. Make sure to replace <account-id> with the actual account id of your provisioned lab account.

//   You can create a [link to another webpage](https://aws.amazon.com/).
// schemaVersion: '0.3'
// parameters:
//   instanceId:
//     type: 'AWS::EC2::Instance::Id'
// mainSteps:
//   - name: updateInstanceProfile
//     action: 'aws:invokeLambdaFunction'
//     inputs:
//       InvocationType: Event
//       Payload: '"{{instanceId}}"'
//       FunctionName: 'arn:aws:lambda:us-east-1:<account-id>:function:labFunction-DIY'


ec2-instance-profile-attached   <---APPLY THIS RULE IN aws config