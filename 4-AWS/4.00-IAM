https://aws.amazon.com/iam/features/

IAM allows you to manage users and also manage their level of
access to the AWS console.

It gives you centralized control over your AWS account.
It also gives you shared access to your AWS account.
It gives you granular permissions.
So this means you can enable different levels of access to different users
within your organization. It enables identity federation.
So this means that it can enable users to log in using credentials stored in
active directory, Facebook, or LinkedIn.
"It allows multifactor authentication."
And this is where a user is granted access only after successfully completing multiple independent authentication mechanisms.
So for example,
providing a username and password as one authentication mechanism,
and then providing a software token.
So that could be via a token generator like Google authenticator as
the second authentication mechanism.

It also provides "temporary access for users or devices and services"
as necessary. So for example,
if you developed a web or mobile phone application,
you can configure identity access management to enable users to have temporary
access to AWS resources within your account.
For example,
to enable access to store or retrieve data located in an S3
bucket or within a DynamoDB database.
It allows you to set up your own password rotation policy.
It integrates with many different AWS services and it
supports PCI DSS compliance for any applications
associated with the payment card industry.
So there are some core concepts that you need to understand before going into
the exam. So first of all, we have users,
so this is the end users and just think people.
So these are the people logging in to the AWS console and also
interacting with AWS by running API commands.
We then have groups which are collections of users grouped together with a
common set of permissions. So for example,
your marketing team might need access to read and write certain files
stored in an S3 bucket, and that might be logos or images,
et cetera.
And theyre going to need a specific set of permissions to allow them to do
this.
So it makes sense to create a group with the required permissions.
And then all you need to do is add the relevant users into that group.
And they will all have permissions to read your S3 bucket. And similarly,
you might have a database administrations team and they need to create DynamoDB
tables and run queries on the database. So in that case,
you can create a group with the relevant permissions for DynamoDB,
and then add all of your database admins into that group.


Roles
Now you can create roles and then assign them to AWS resources.
So a role is used to define a set of permissions, for example,
S3 bucket access.
And then that role can be assumed by either users or AWS services
such as EC2.
So you might have an EC2 instance which needs to query a database or access
files in S3, and you can configure that using a role. And finally,
we have policies and a policy is a document that defines either one or
more permissions. And a policy can be attached to either a user,
a group, or a role. And when we attach a policy, the user, group,
or role will then have the permissions defined within that policy.
And it's possible for a user, group, and role to all share the same policy'
----------------------------------------------------------------------
Permissions
Explicit Deny will over-ride any Allow
e.g. Explicit Deny for a user to S3 bucket will over-ride Allow of his group permission to use S3

All permissions are implicitly Denied until you grant them explicitly
Principle of Least Privilege when assigning Permissions

IAM Policy Simulator:
to validate a policy works as expected
https://policysim.aws.amazon.com

New users have no permission when created

--------------------------------------------------------------
Q 
Which IAM entity can you use to delegate access to trusted entities such as IAM users, applications, or AWS services such as EC2?


IAM Group
IAM User
IAM Web Identity Federation
IAM Role

Good work!
You can use IAM roles to delegate access to IAM users managed within your account, to IAM users under a different AWS account, to a web service offered by AWS such as Amazon Elastic Compute Cloud (Amazon EC2), or to an external user authenticated by an external identity provider (IdP) service that is compatible with SAML 2.0 or OpenID Connect, or a custom-built identity broker.
----------------------------------------------------------------
AMAZON COGNITO

https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_oidc.html
Web Identity Federation: Amazon Cognito: (Identity Broker)
web identity federation simplifies authentication for mobile & web applications
and authorization for web applications.
And it gives users access to AWS resources
after successfully authenticating
with a web-based identity provider
like Facebook, Amazon, or Google.

Types of Identity Providers:
SAML - Security Assertion Markup Language (SAML) Single-Sign-on
OPENID - OAUTH Web Identity Federation - OpenID Connect (OIDC)

users will receive an authentication code
from the web identity provider,
and they can trade this authentication code
for temporary AWS security credentials,
authorizing access to AWS resources.
And there's a service called Amazon Cognito,
which provides web identity federation,
including sign-up and sign-in functionality
for your applications and access for guest users as well.
So Cognito acts as an identity broker,
and this means that it manages the authentication
between your application and the web identity provider
like Facebook, for example.
So you don't need to write any additional code
to allow your users to sign up or sign in to your
application using their Facebook account.
And Cognito supports multiple devices,
and it will even synchronize user data
across multiple different devices,

Cognito provides Temporary Credentials that map to an IAM role
Cognito->
    User Pools - user dirs used to managed sign-in functionality 4 apps
     users can sign-in directly to user pool using fb,g+
    Identity Pools - temporary aws credentials with access to ec2/s3
STEPS
1- user logs into fb, then cognito brokers sign-up/in (USER POOL)
2- after successful sign-in -> fb will return a JWT Token (JSON Web Token)
3- JWT Token is replaced by aws Credentials by cognito (IDENTITY POOL)
4- aws credentials map to IAM role which grants users access to resources

COGNITO PUSH SYNCHRONIZATION
push updates and synchronize user data across multiple devices
under the hood, its using SNS notifications to all devices associated with a user

----------------------------------------------------------
COGNITO SET UP:
in 
Advanced app client settings
We have populated suggested authentication flows, OAuth 2.0 grant types, and OIDC scopes based on the selections you made earlier.
->
1- Identity providersInfo
Select the identity providers that will be available to this app client.
Select identity providers
->Cognito user pool
Users can sign in to Cognito using an email, phone number, or username.


2- OAuth 2.0 grant typesInfo
Choose at least one OAuth grant type to configure how Cognito will deliver tokens to this app. We have populated suggested options based on the app type you selected.
--->
Select OAuth 2.0 grant types
Authorization code grant
Provides an authorization code as the response
--->
Implicit grant
Specifies that the client should get the access token (and, optionally, ID token, based on scopes) directly

3- OpenID Connect scopesInfo
Choose at least one OpenID Connect (OIDC) scope to specify the attributes this app client can retrieve for access tokens. 
Select OIDC scopes
OpenID
-->
Phone
Requires OpenID to be selected
-->
Email
Requires OpenID to be selected
-->
aws.cognito.signin.user.admin
-->
Profile
Requires OpenID to be selected


CREATE 

---------------------------
GOTO 
Amazon Cognito > User pools > MyUserPool > Edit Hosted UI customization
Add your logo to customize

GOTO 
Amazon Cognito > User pools > MyUserPool > App client: myappclient
Hosted UI
See your login page
---------------------------------------------------------------------------
LAB
1- create DynamoDB 
2- create EC2 instance 
3- Create Cognito Identity Pool and IAM Role 
4- Configure Website - add details of our Cognito Identity pool to website



Cognito Identity Pool Demo Commands
PART 1:

1.	Using the CloudShell, create the facts table:

aws dynamodb create-table --table-name facts --attribute-definitions \
AttributeName=fact_id,AttributeType=N --key-schema \
AttributeName=fact_id,KeyType=HASH \
--provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5

2.	 Populate the table with items:

wget https://raw.githubusercontent.com/ACloudGuru-Resources/course-aws-certified-developer-associate/main/Cognito_Demo/items.json

aws dynamodb batch-write-item --request-items file://items.json

3.	Launch an EC2 instance, enable HTTP access on port 80, and add the following user data script:

#!/bin/bash
dnf update -y
dnf install git -y
dnf install -y httpd
systemctl start httpd
systemctl enable httpd

(For Linux 2023, dnf is the new package manager and yum is going be deprecated eventually. )

4.	Test that the web server is running. Using the public IP address.

5. 	Connect to the instance, and copy the website files from GitHub:

sudo -su
git clone https://github.com/ACloudGuru-Resources/course-aws-certified-developer-associate

cd course-aws-certified-developer-associate/Cognito_Demo
cp index.html fact.jpg /var/www/html

PART 2:

6.	In the CloudShell, create new identity pool, named DynamoPool, allow unauthenticated entities:

aws cognito-identity create-identity-pool \
    --identity-pool-name DynamoPoolus \
    --allow-unauthenticated-identities \
    --output json

"IdentityPoolId": "us-east-1:d4e6fc07-844e-4bee-bd6d-db826df83c32" usa
"IdentityPoolId": "us-east-1:3bdfca7e-ce2e-4a7c-85a4-54c1b2cbd697"
7. Download the permissions policy for the role we are going to create. 

wget https://raw.githubusercontent.com/ACloudGuru-Resources/course-aws-certified-developer-associate/main/Cognito_Demo/myCognitoPolicy.json

Copy the ID of the identity pool. Then update the myCognitoPolicy.json withj the ID of the identity pool you ust created. 

8.	Create an IAM role named Cognito_DynamoPoolUnauth:

aws iam create-role --role-name Cognito_DynamoPoolUnauth --assume-role-policy-document file://myCognitoPolicy.json --output json

9.	Grant the Cognito_DynamoPoolUnauth role read access to DynamoDB by attaching a managed policy (AmazonDynamoDBReadOnlyAccess).

aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/AmazonDynamoDBReadOnlyAccess --role-name Cognito_DynamoPoolUnauth

10. 	Get the IAM role Amazon Resource Name (ARN).
aws iam get-role --role-name Cognito_DynamoPoolUnauth --output json

arn:aws:iam::767665886117:role/cognito_dynamopoolunauthusa

11.	Add our role to the Cognito Identity Pool. Replace the identity pool ID with your own identity pool ID and use the role ARN from the previous step.

aws cognito-identity set-identity-pool-roles --identity-pool-id "us-east-1:6dc2afe1-1aff-43df-91f4-9b16123688b5" \
--roles unauthenticated=arn:aws:iam::282485216722:role/Cognito_DynamoPoolUnauth --output json

12.	Double check it worked - Replace the identity pool ID with your own identity pool ID: 

aws cognito-identity get-identity-pool-roles  --identity-pool-id "us-east-1:xxxxxxxxxxxxxxxxxxxxxxxxxxxxx"


cloudshell-user@ip-10-2-28-120 ~]$ aws cognito-identity get-identity-pool-roles --identity-pool-id "us-east-1:d4e6fc07-844e-4bee-bd6d-db826df83c32"
{
    "IdentityPoolId": "us-east-1:d4e6fc07-844e-4bee-bd6d-db826df83c32",
    "Roles": {
        "unauthenticated": "arn:aws:iam::767665886117:role/cognito_dynamopoolunauthusa"
    }
}

13. 	We can now specify the Cognito credentials in our application - i.e. in the JavaScript section of our webpage!
Replace the identity pool ID with your own and the role ARN with your own role ARN. 
We are going to add this snippet to our index.html:


sudo vi /var/www/html

AWS.config.credentials = new AWS.CognitoIdentityCredentials({
IdentityPoolId: "us-east-1:3bdfca7e-ce2e-4a7c-85a4-54c1b2cbd697",
RoleArn: "arn:aws:iam::767665886117:role/cognito_dynamodbunauth"
});



---------------------------------------------------------------------------

"Three Types of AWS Policies"
AWS MANAGED POLICIES 
AmazonEC2ReadOnlyAccess
AmazonDynamoDBFullAccess
AWSCodeCommitPowerUser
you cannot chhange permissions defined inn an AWS Managed Policy
Reusable

CUSTOMER MANAGED POLICIES
you can copy aws managed policy and customize it 
Reusable

INLINE POLICY 
there is 1:1 relationship b/w entity and inline policy 
when you delete entity, policy gets deleted too
aws recommends using any MANAGED policy over INLINE
there is an option to add inline policy in user,group,role section
Not REusable


--------------------------------------------------------------------------
https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRoleWithWebIdentity.html
Security Token Service
STS - AssumeRoleWithWebIdentity

it's an API, which is provided by STS,
which is the Security Token Service,
and it returns temporary security credentials
for users which have been authenticated by either a mobile
or web application using a web identity provider
like Amazon, Facebook, or Google.
And of course for mobile phone applications,
they recommend Cognito, and underneath Cognito
is actually making the STS assume-role-with-web-identity
calls on your behalf.
So when you use Cognito you don't explicitly
need to use this API.
However, for regular web applications,
where you're not using Cognito
you can use this STS assume-role-with-web-identity-API.'

*jwt=javascriptwebtoken
user------------------------>faceebook (for login)
user<-----JWT token----------facebook
user---JWT---assume-role-with-web-identity----->STS
user<-------aws credentials---------------------STS
user----------can now access------>S3,DynamoDB

Part of the Security Token Service
• Allows users who have authenticated with a Web Identity provider to
access AWS resources
• Once the user has authenticated, the application makes the assume-rolewith-web-identity API call
• If successful, STS will return temporary credentials enabling access to
AWS resources
• AssumedRoleUser ARN and AssumedRoleID - are used to programatically
reference the temporary credentials - not an IAM role or user
They are simply ARNs used to programmatically reference
the credentials.

"Sample Response"
<AssumedRoleUser>
<Arn>arn:aws:sts::123456789012:assumed-role/FederatedWebIdentityRole/app1</Arn>
<AssumedRoleId>AROACLKWSDQRAOEXAMPLE:app1</AssumedRoleId>
</AssumedRoleUser>

<Credentials>
<SessionToken>AQoDYXdzEE0a8ANXXXXXXXXNO1ewxE5TijQyp+IEXAMPLE</SessionToken>
<SecretAccessKey>wJalrXUtnFEMI/K7MDENG/bPxRfiCYzEXAMPLEKEY</SecretAccessKey>
<Expiration>2014-10-24T23:00:23Z</Expiration>
<AccessKeyId>ASgeIAIOSFODNN7EXAMPLE</AccessKeyId>


---------------------------------------------------------------------------
CROSS ACCOUNT ROLES

https://aws.amazon.com/blogs/security/how-to-enable-cross-account-access-to-the-aws-management-console/
"Configuring Cross Account Access"

it's all about delegating access
to resources in different AWS accounts that you own,
and it allows you to share resources
in 1 AWS account with users in a different AWS account.
And the way that we set it up
is by using Identity And Access Management roles.
So we create a role in 1 account to allow the access
and then grant permission to users
in a different account so that they can assume that role.
And the really cool thing is that you can switch roles
within the AWS Management Console itself.
So you can switch to a role
that grants you the permissions you need
in a different account and no password is required. Now
you might be wondering, "when would I actually use this?"
Well, imagine you've got a development account
and a production account,
and you want to give your developers access
to the management console
and a single S3 bucket in your production account.
So maybe your development team
are doing some development and testing
and they need some historical production data to work with.
And this is quite a common use case for a lot of companies.
Well, it's actually really easy
to set this up, and I'm going to show you how to do it.





Cross-share ROLE will be created on the account whose resources will be shared

prod account        dev account
S3 Bucket           developer IAM Group
IAM Policy          IAM Policy
IAM Role -------------^

Giving developers access to prod account's S3 Bucket'

-----------------------------STEPS-------------------------------------
--------------------------PROD ACCOUNT---------------------------------
1- create S3 Bucket 
2- IAM -> Create Policy -> name = developer-read-write
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": "s3:ListAllMyBuckets",
      "Resource": "arn:aws:s3:::*"
    },
    {
      "Effect": "Allow",
      "Action": [
        "s3:ListBucket",
        "s3:GetBucketLocation"
       ],
      "Resource": "arn:aws:s3:::productionapp"
    },
    {
      "Effect": "Allow",
      "Action": [
        "s3:GetObject",
        "s3:PutObject",
        "s3:DeleteObject"
      ],
      "Resource": "arn:aws:s3:::productionapp/*"
    }
  ]
}

3- Attach This policy to a Role
Trusted Entity Type = AWS Account 
Another AWS Account = *********
Attach Policy = developer-read-write
Role Name = MyDeveloperAccess

--------------------------DEV ACCOUNT---------------------------------

1- Create Group with Administrative Access policy 
2- Add User 
3- IAM -> Groups -> Developers -> Create Inline Policy
JSON
policy.json
{
  "Version": "2012-10-17",
  "Statement": {
    "Effect": "Allow",
    "Action": "sts:AssumeRole",
    "Resource": "arn:aws:iam::PRODUCTION-ACCOUNT-ID:role/MyDeveloperAccess"
    }
}


4- Now Sign in as anna 
top right - switch role under account dropdown







---------------------------------------------------------------------------
CLOUDTRAIL 
when you need to know who to blame 
CT is a service that enables governance, compliance, operational auditing, risk auditing of your AWS account

easily identify which users/accounts made calls to aws
where - source ip address 
when - EventTime 
who - User,UserAgent 
what - Region,Resource,Action


default log history = 90 days 
create a custom trail if you want logs more than 90 days
  catch: then no gui, use S3 and athena

* A trail can be set to all regions , across all accounts 
* you can encrypt your logs SSE-KMS server side encryption 
* you can configure CT to CloudWatch logs 
* 2 types of events 
  management (default on) &   Data event
  90%                         S3 & Lambda
  cant be turned off          off by default
---------------------------------------------------------------------------
How can you allow a user from one AWS account to access and manage resources in another AWS account?


Configure cross-account access
Configure Cognito
Configure cross-origin resource sharing
Configure web identity federation

Sorry!
Incorrect. Cross-origin resource sharing (CORS) defines a way for client web applications that are loaded in one domain to interact with resources in a different domain.

Correct Answer
Correct. By setting up cross-account access, you can delegate access to resources that are in different AWS accounts, and you don't need to create individual IAM users in each account. Reference: IAM Tutorial: Delegate access across AWS accounts using IAM roles.


--------------------------------------------------------------------------'
When using Web Identity Federation to allow a user to access an AWS service (such as an S3 bucket), which of the following is the correct order of steps?

Users cannot use Facebook credentials to access the AWS platform.

A user authenticates with Facebook first. They are then given an ID token by Facebook, which they can then trade for temporary security credentials.

A user logs in to the AWS platform using their Facebook credentials. AWS authenticate with Facebook to check the credentials. Temporary Security Access is granted to AWS.

A user makes the AssumeRoleWithWebIdentity API Call. The user is then redirected to Facebook to authenticate. Once authenticated, the user is given an ID token. The user is then granted temporary access to the AWS platform.

Sorry!
Incorrect. The user needs to authenticate with Facebook first, that will return a web identity token. Then AWS STS is called and passes the web identity token as input. AWS STS authorizes the call and provides temporary AWS access credentials. The user is allowed to assume an IAM role and access AWS resources in accordance with the role's security policy.

Correct Answer
Correct. The user needs to authenticate with Facebook first, that will return a web identity token. Then AWS STS is called and passes the web identity token as input. AWS STS authorizes the call and provides temporary AWS access credentials. The user is allowed to assume an IAM role and access AWS resources in accordance with the role's security policy.

---------------------------------------------------------------------------
Amazon Cognito provides Web Identity Federation with which of the following features?

Choose 3


Single sign-on for Active Directory users
Multi-Factor Authentication
Synchronization of user data across multiple device types
Sign-up and sign-in to your applications

Good work!
With Amazon Cognito, you can add Multi-Factor Authentication (MFA) to a User Pool. Reference: Adding Multi-Factor Authentication (MFA) to a User Pool.

Cognito enables developers to sync data across devices, platforms, and applications.

Amazon Cognito User Pools provide sign-up and sign-in services.

-------------------------------------------------------------------------
Which Amazon Cognito component enables you to provide user temporary credentials to grant access only to allowed AWS services?


IAM Users
User Pools
Identity Pools
IAM Groups

Good work!
Amazon Cognito identity pools enable you to create unique identities for your users and authenticate them with identity providers. With an identity, you can obtain temporary, limited-privilege AWS credentials to access other AWS services. Amazon Cognito identity pools support public identity providers—Amazon, Apple, Facebook, and Google—as well as unauthenticated identities. It also supports developer authenticated identities, which let you register and authenticate users via your own back-end authentication process. Think of User Pools as providing authentication, and Identity Pools as providing authorization.



Think of User Pools as providing authentication, and Identity Pools as providing authorization.




--------------------------------------------------------------------------
You are working on a mobile phone app for an online retailer that stores customer data in DynamoDB. You would like to allow new users to sign-up using their Facebook credentials. What is the recommended approach?


"After the user has successfully logged in to Facebook and received an authentication token, Cognito should be used to exchange the token for temporary access to DynamoDB"


Embed encrypted AWS credentials into the application code, so that the application can access DynamoDB on the user's behalf'.


Write your own custom code which allows the user to log in via Facebook and receive an authentication token, then calls the AssumeRoleWithWebIdentity API and exchanges the authentication tokens for temporary access to DynamoDB


After the user has authenticated with Facebook, allow them to download encrypted AWS credentials to their device so that the mobile app can access DynamoDB

Sorry!
Incorrect. AWS recommends Amazon Cognito, so you can focus on creating great app experiences instead of worrying about building, securing, and scaling a solution to handle user management, authentication, and sync across platforms and devices.

Correct Answer
Correct. Amazon Cognito works with external identity providers that support SAML or OpenID Connect, social identity providers (such as Facebook, Twitter, Amazon) and you can also integrate your own identity provider.
----------------------------------------------------------------------
The most cost-effective solutions to allow existing Active Directory users access to AWS without having to recreate AWS IAM user accounts are:

SAML 2.0

Amazon Directory Services

SAML 2.0 enables web-based, single sign-on (SSO) authentication between an identity provider (IdP) and an application, which in this case would be AWS. This allows you to use your existing Active Directory for authentication.

Amazon Directory Services allows you to connect your AWS resources to an existing Microsoft AD, which means you can use your existing AD users and groups to access AWS resources. This option leverages your existing infrastructure and doesnt require the creation of additional IAM users.



---------------------------------------------------------------------------------------------

Your company uses an Identity Provider (IdP) for Single-sign on (SSO) and has tasked their solutions architect with connecting their AWS Account to the IdP so their users can leverage their corporate identity to access the environment.

What actions should the solutions architect take to meet these requirements? (Select TWO)

````Create an AWS IAM Role with a trust relationship with the IdP.
Create an AWS IAM User Group, associate the User Group with the IdP and add users to the User Group.
````Create an AWS IAM Identity Provider by uploading the SAML metadata document from your IdP.
Create an AWS IAM User with AWS Management Console Access, attach a policy with a trust relationship with the IdP.
Create an AWS IAM Identity Provider by uploading the JSON metadata document from your IdP.


-----------------------------------------------------------------------------------------------
You are developing a meme-sharing application that runs business login on a fleet of EC2 instances behind an Application Load Balancer. Your website is served by a CloudFront distribution. The security architect has asked you to decouple the user authentication process from the application servers, enable users to easily sign up and sign in to the website and use proper Identity and Access Management controls to allow access to a number of S3 buckets where they can upload images. Which of the following solutions would you recommend to address this use-case?

Use Cognito for sign-up, and use resource policies to manage user permissions.

Resource policies can be used to define access to certain resources in AWS, but they are not a substitute for proper IAM access controls.

Selected
Use MFA for sign-up and sign-in, and use IAM to manage user permissions.

Use IAM for sign-up and use Cognito to manage user permissions.

``````````Use Cognito for sign-up and use IAM to manage user permissions.

Cognito can be used for sign-up and sign-in functionality. It integrates with IAM to control access to AWS resources.


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Your application uses the STS API call AssumeRoleWithWebIdentity to enable access for users who have authenticated using a Web ID provider. Which of the following best describes what a successful call to AssumeRoleWithWebIdentity returns?

AssumeRoleWithWebIdentity returns a set of temporary credentials (access key ID, secret access key, and security token) that give temporary access to AWS services.````````````````````````````````````````````````````````````

AssumeRoleWithWebIdentity returns an access key ID, a secret access key, and a security token as temporary security credentials. These credentials can be used by applications to sign calls for AWS service API operations. Reference: [STS: AssumeRoleWithWebIdentity] (https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRoleWithWebIdentity.html)

AssumeRoleWithWebIdentity returns an ARN of the IAM role that the user is allowed to assume temporarily.

AssumeRoleWithWebIdentity returns an assumed role ID that the user is allowed to assume temporarily.

AssumeRoleWithWebIdentity does not return an assumed role ID that the user is allowed to assume temporarily. Reference: STS: AssumeRoleWithWebIdentity

Selected
AssumeRoleWithWebIdentity returns an ARN of the IAM user that the user is allowed to assume temporarily.

=========================================================================================================
A company selling smart security cameras uses an S3 bucket behind a CloudFront web distribution to store its static content, which it shares with customers worldwide. The company has recently released a new firmware update intended only for its premium customers, and unauthorized access should be denied with a user authentication process that has minimal latency.

How can a developer refactor the current setup to achieve this requirement with the MOST efficient solution?

Restrict access to the S3 bucket only to premium customers using an Origin Access Control (OAC).
Use Signed URLs and Signed Cookies in CloudFront to distribute the firmware update file.
````````````Use Lambda@Edge and Amazon Cognito to authenticate and authorize premium customers to download the firmware update.
Use the AWS Serverless Application Model (AWS SAM) and Amazon Cognito to authenticate the premium customers.
Incorrect
========================

Lambda@Edge is a feature of Amazon CloudFront that lets you run code closer to users of your application, which improves performance and reduces latency. With Lambda@Edge, you don’t have to provision or manage infrastructure in multiple locations around the world. You pay only for the compute time you consume – there is no charge when your code is not running.

With Lambda@Edge, you can enrich your web applications by making them globally distributed and improving their performance — all with zero server administration. Lambda@Edge runs your code in response to events generated by the Amazon CloudFront content delivery network (CDN). Just upload your code to AWS Lambda, which takes care of everything required to run and scale your code with high availability at an AWS location closest to your end user.



You can use Lambda@Edge to help authenticate and authorize users for the premium pay-wall content on your website, filtering out unauthorized requests before they reach your origin infrastructure. For example, you can trigger a Lambda function to authorize each viewer request by calling authentication and user management service such as Amazon Cognito.

Hence, the correct answer is: Use Lambda@Edge and Amazon Cognito to authenticate and authorize premium customers to download the firmware update.

The option that says: Use the AWS Serverless Application Model (AWS SAM) and Amazon Cognito to authenticate the premium customers is incorrect because AWS SAM is just an open-source framework that you can use to build serverless applications on AWS. In this scenario, you have to integrate your CloudFront web distribution with Lambda@Edge, and you can do this without using AWS SAM.

The option that says: Restrict access to the S3 bucket only to premium customers by using an Origin Access Control (OAC) is incorrect because OAC is primarily used to prevent your users from viewing your S3 files by simply using the direct S3 URL.

The option that says: Use Signed URLs and Signed Cookies in CloudFront to distribute the firmware update file is incorrect. Although this solution provides a way to authenticate the premium users for the private content, the process of authentication has a significant latency in comparison to the Lambda@Edge solution. In this option, you have to refactor your application (which is deployed to a specific AWS region) to either create and distribute signed URLs to authenticated users or to send Set-Cookie headers that set signed cookies on the viewers for authenticated users. This will cause the latency, which could have been improved if the authentication logic resides on CloudFront edge locations using Lambda@Edge.

=============================================================================================================
A company has an AWS Amplify application, relying on Amazon Cognito for user authentication. Multi-factor authentication (MFA) is disabled for their User Pool. There has been a recent data breach in a popular website. The company is worried that attackers might exploit compromised email addresses and passwords to sign into their applications. For this reason, they want to enforce MFA only on users with suspicious login attempts.

How can the company satisfy these requirements

Enable Adaptive Authentication for the User Pool````````````````````

Create a subscription filter Lambda function that monitors for the CompromisedCredentialRisk metric from Advanced Security Metrics in CloudWatch Logs and triggers MFA when detected
Enable the Time-based one-time password (TOTP) software token MFA for the User Pool
Recreate the User Pool and enable SMS text message MFA.
Incorrect
With adaptive authentication, you can configure your user pool to block suspicious sign-ins or add second factor authentication in response to an increased risk level. For each sign-in attempt, Amazon Cognito generates a risk score for how likely the sign-in request is to be from a compromised source. This risk score is based on factors that include device and user information.


=============================================================================================================
A developer wants to use multi-factor authentication (MFA) to protect programmatic calls to specific AWS API operations like Amazon EC2 StopInstances. He needs to call an API where he can submit the MFA code that is associated with his MFA device. Using the temporary security credentials that are returned from the call, he can then make programmatic calls to API operations that require MFA authentication.

Which API should the developer use to properly implement this security feature?


AssumeRoleWithWebIdentity

GetSessionToken````````````

GetFederationToken

AssumeRoleWithSAML


Incorrect
The GetSessionToken API returns a set of temporary credentials for an AWS account or IAM user. The credentials consist of an access key ID, a secret access key, and a security token. Typically, you use GetSessionToken if you want to use MFA to protect programmatic calls to specific AWS API operations like Amazon EC2 StopInstances. MFA-enabled IAM users would need to call GetSessionToken and submit an MFA code that is associated with their MFA device.

===============================================================================================================
A company has a static website running in an Auto Scaling group of EC2 instances which they want to convert as a dynamic e-commerce web portal. One of the requirements is to use HTTPS to improve the security of their portal and also improve their search ranking as a reputable and secure site. A developer recently requested an SSL/TLS certificate from a third-party certificate authority (CA) which is ready to be imported to AWS.

Which of the following services can the developer use to safely import the SSL/TLS certificate? (Select TWO.)

CloudFront
A private S3 bucket with versioning enabled
IAM certificate store`````````````````````````````````
Amazon Cognito
AWS Certificate Manager```````````````````````````````
Incorrect
To enable HTTPS connections to your website or application in AWS, you need an SSL/TLS server certificate. For certificates in a Region supported by AWS Certificate Manager (ACM), it is recommended that you use ACM to provision, manage, and deploy your server certificates. In unsupported Regions, you must use IAM as a certificate manager.



ACM is the preferred tool to provision, manage, and deploy your server certificates. With ACM you can request a certificate or deploy an existing ACM or external certificate to AWS resources. Certificates provided by ACM are free and automatically renew. In a supported Region, you can use ACM to manage server certificates from the console or programmatically

Use IAM as a certificate manager only when you must support HTTPS connections in a Region that is not supported by ACM. IAM securely encrypts your private keys and stores the encrypted version in IAM SSL certificate storage. IAM supports deploying server certificates in all Regions, but you must obtain your certificate from an external provider for use with AWS. You cannot upload an ACM certificate to IAM. Additionally, you cannot manage your certificates from the IAM Console.

If you got your certificate from a third-party CA, import the certificate into ACM or upload it to the IAM certificate store. Hence, the correct answers are AWS Certificate Manager (ACM) and IAM certificate store.

A private S3 bucket with versioning enabled is incorrect as S3 is not a suitable service to store the SSL certificate. You have to import it to either AWS Certificate Manager (ACM) or IAM certificate store.

Amazon Cognito is incorrect because this is just a user identity and data synchronization service that helps you securely manage and synchronize app data for your users across their mobile devices. This service can’t be used to store or import your SSL certificates.

CloudFront is incorrect. Although you can upload certificates to CloudFront, it doesn’t mean that you can import third-party SSL certificates on it. If you got your certificate from a third-party CA then you have to import the certificate into ACM or upload it to the IAM certificate store first. You would also not be able to export the certificate that you have loaded in CloudFront nor assign them to your EC2 or ELB instances as it would be tied to a single CloudFront distribution.

=================================================================================================================
You are developing an online game where the app preferences and game state of the player must be synchronized across devices. It should also allow multiple users to synchronize and collaborate shared data in real time.

Which of the following is the MOST appropriate solution that you should implement in this scenario?

Integrate AWS Amplify to your mobile app.
Integrate Amazon Pinpoint to your mobile app.
Integrate AWS AppSync to your mobile app.```````````````
Integrate Amazon Cognito Sync to your mobile app.
Correct
AWS AppSync simplifies application development by letting you create a flexible API to securely access, manipulate, and combine data from one or more data sources. AppSync is a managed service that uses GraphQL to make it easy for applications to get exactly the data they need.

With AppSync, you can build scalable applications, including those requiring real-time updates, on a range of data sources such as NoSQL data stores, relational databases, HTTP APIs, and your custom data sources with AWS Lambda. For mobile and web apps, AppSync additionally provides local data access when devices go offline, and data synchronization with customizable conflict resolution, when they are back online.



AWS AppSync is quite similar with Amazon Cognito Sync which is also a service for synchronizing application data across devices. It enables user data like app preferences or game state to be synchronized as well however, the key difference is that, it also extends these capabilities by allowing multiple users to synchronize and collaborate in real time on shared data.

Hence, the correct answer is to integrate AWS AppSync to your mobile app.

Integrating AWS Amplify to your mobile app is incorrect because this service just makes it easy to create, configure, and implement scalable mobile and web apps powered by AWS. This is primarily used to automate the application release process of both your frontend and backend allowing you to deliver features faster, and not for synchronizing application data across devices.

Integrating Amazon Cognito Sync to your mobile app is incorrect. Although this service can also be used in synchronizing application data across devices, it does not allow multiple users to synchronize and collaborate in real-time on shared data, unlike AWS AppSync.

Integrating Amazon Pinpoint to your mobile app is incorrect because this service simply allows you to engage with your customers across multiple messaging channels. This is primarily used to send push notifications, emails, SMS text messages, and voice messages.

=================================================================================================================
	
	
A developer is building a ReactJS application that will be hosted on Amazon S3. Amazon Cognito handles the registration and signing of users using the AWS Software Development Kit (SDK) for JavaScript. The JSON Web Token (JWT) received upon authentication will be stored on the browsers local storage. After signing in, the application will use the JWT as an authorizer to access an API Gateway endpoint.

What are the steps needed to implement the scenario above? (Select THREE.)

(view)	1	0	1	00:01:58	
 Create an Amazon Cognito Identity Pool.
 Create an Amazon Cognito User Pool.```````````
 On the API Gateway Console, create an authorizer using the Cognito User Pool ID.````````````
 Set the name of the header that will be used from the request to the Cognito User Pool as a token source for authorization.```````````````
 Choose and set the authentication provider for your website.
 Set the name of the header that will be used from the request to the Cognito Identity Pool as a token source for authorization.
As an alternative to using IAM roles and policies or Lambda Authorizers (formerly known as custom authorizers), you can use an Amazon Cognito User Pool to control who can access your API in Amazon API Gateway.

To use an Amazon Cognito user pool with your API, you must first create an authorizer of the COGNITO_USER_POOLS type and then configure an API method to use that authorizer. After the API is deployed, the client must first sign the user into the user pool, obtain an identity or access token for the user, and then call the API method with one of the tokens, which are typically set to the request's Authorization header. The API call succeeds only if the required token is supplied and the supplied token is valid, otherwise, the client isn't authorized to make the call because the client did not have credentials that could be authorized.

==================================================================================================================
A team of developers needs permission to launch EC2 instances with an instance role that will allow them to update items in a DynamoDB table. Each developer has access to IAM users that belongs in the same IAM group.

Which of the following steps must be done to implement the solution?

(view)	1	0	1	00:03:11	
 Create an IAM role with an IAM policy that will allow access to the DynamoDB table. Add the EC2 service to the trust policy of the role. Create a custom policy with iam:GetRolePolicy and iam:PutRolePolicy permissions. Attach the policy to the IAM group.
 /Create an IAM role with an IAM policy that will allow access to the DynamoDB table. Add the EC2 service to the trust policy of the role. Create a custom policy with the iam:PassRole permission. Attach the policy to the IAM group./
 Create an IAM role with an IAM policy that will allow access to the EC2 instances. Add the DynamoDB service to the trust policy of the role. Create a custom policy with the iam:GetRole permission. Attach the policy to the IAM group.
 Create an IAM role with an IAM policy that will allow access to the EC2 instances. Add the DynamoDB service to the trust policy of the role. Create a custom policy with the iam:PassRole permission. Attach the policy to the IAM group.
Before you can access any AWS services via CLI/API from an EC2 instance, you must first configure and specify your access credentials. A more secure approach is by allowing the EC2 to assume an IAM role so it can access AWS services on your behalf. This way, your credentials are never stored or exposed.

According to the scenario, the EC2 instances (that will be launched by the developers) need access to a DynamoDB table. First, we need to create an IAM role with permission that will allow access to the DynamoDB table. After creating the role, you must add the EC2 service as a trusted entity in the role's trust policy. You need to do this so EC2 instances can assume the IAM role. Afterwhich, you have to attach the following policy to the IAM Group:



If the developers don’t have iam:PassRole permission, he or she can’t associate a role with the instance during launch.

The PassRole permission helps you make sure that a user doesn’t pass a role to an EC2 instance where the role has more permissions than you want the user to have. For example, Alice might be allowed to perform only EC2 and S3 actions. If Alice could pass a role to the EC2 instance that allows additional actions, she could log into the instance, get temporary security credentials via the role she passed, and make calls to AWS that you don’t intend.

Hence, the correct answer is: Create an IAM role with an IAM policy that will allow access to the DynamoDB table. Add the EC2 service to the trust policy of the role. Create a custom policy with iam:PassRole permission. Attach the policy to the IAM group.


'
============================================================================================================
An EC2 instance has an IAM role that explicitly denies all S3 API Write operations. Moreover, the instance has access key credentials configured to gain full access to S3 operations.

Which statement is correct for this scenario?

(view)	1	0	1	00:01:18	
 The instance cannot upload objects to S3 buckets.
 The instance can list all S3 buckets but will not be able to delete them.
 The instance can perform all S3 operations on any S3 bucket.
 The instance can perform all S3 operations except for write operations on any S3 bucket.
The AWS CLI uses credentials and configuration settings located in multiple places, such as the system or user environment variables, local AWS configuration files, or explicitly declared on the command line as a parameter. Certain locations take precedence over others. The AWS CLI credentials and configuration settings take precedence in the following order:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  - - - - -
1. Command line options – Overrides settings in any other location. You can specify --region, --output, and --profile as parameters on the command line.
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  - - - - -

2. Environment variables – You can store values in your systems environment variables.
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  - - - - -

3. CLI credentials file – The credentials and config file are updated when you run the command aws configure. The credentials file is located at ~/.aws/credentials on Linux or macOS, or at C:\Users\USERNAME\.aws\credentials on Windows. This file can contain the credential details for the default profile and any named profiles.
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  - - - - -

4. CLI configuration file – The credentials and config file are updated when you run the command aws configure. The config file is located at ~/.aws/config on Linux or macOS, or at C:\Users\USERNAME\.aws\config on Windows. This file contains the configuration settings for the default profile and any named profiles.
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  - - - - -

5. Container credentials – You can associate an IAM role with each of your Amazon Elastic Container Service (Amazon ECS) task definitions. Temporary credentials for that role are then available to that tasks containers.
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  - - - - -

6. Instance profile credentials – You can associate an IAM role with each of your Amazon Elastic Compute Cloud (Amazon EC2) instances. Temporary credentials for that role are then available to code running in the instance. The credentials are delivered through the Amazon EC2 metadata service.
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  - - - - -

The EC2 instance can perform any S3 operations since the CLI credentials file takes precedence over Instance profile credentials.

Hence, the correct answer is: The instance can perform all S3 operations on any S3 bucket.