
Amazon RDS
Amazon Relational Database Service (Amazon RDS) is a web service that makes it easier to set up, operate, and scale relational databases in the cloud. With Amazon RDS, you can manage common database administration tasks like OS patching, database updates, and backups. Supported database engines include PostgreSQL, MySQL, MariaDB, Oracle, and Microsoft SQL Server.


Amazon Aurora
Amazon Aurora is part of the managed database service Amazon RDS. Aurora is MySQL and PostgreSQL compatible. With Aurora, you can combine the performance and availability of traditional enterprise databases with the simplicity and cost-effectiveness of open-source databases.


Amazon Redshift - data warehousing - sql
Amazon Redshift is an enterprise-level, petabyte scale, fully managed data warehousing service. With Amazon Redshift, you can achieve efficient storage and optimum query performance through a combination of massively parallel processing, columnar data storage, and very efficient, targeted data compression encoding schemes.


Amazon DynamoDB - serverless nosql
Amazon DynamoDB is a fully managed key-value, non-relational database service that provides fast and predictable performance with seamless scalability. With DynamoDB, you can create database tables that store and retrieve data and serve any level of request traffic. You can scale up or scale down your tables throughput capacity without downtime or performance degradation.


Amazon DocumentDB - instance-based nosql
Amazon DocumentDB (with MongoDB compatibility) is designed from the ground up to give you the performance, scalability, and availability you need when operating mission-critical MongoDB workloads at scale. In Amazon DocumentDB, the storage and compute are decoupled, allowing each to scale independently.


Amazon Keyspaces - wide-column nosql
Amazon Keyspaces (for Apache Cassandra) is a scalable, highly available, and managed Apache Cassandra–compatible database service. With Amazon Keyspaces, you can run your Cassandra workloads on AWS using the same Cassandra application code and developer tools that you use today. You don’t have to provision, patch, or manage servers, and you don’t have to install, maintain, or operate software. Amazon Keyspaces is serverless, so you pay for only the resources you use and the service can automatically scale tables up and down in response to application traffic. You can build applications that serve thousands of requests per second with virtually unlimited throughput and storage. Data is encrypted by default and Amazon Keyspaces enables you to back up your table data continuously using point-in-time recovery. Amazon Keyspaces gives you the performance, elasticity, and enterprise features you need to operate business-critical Cassandra workloads at scale.


Amazon ElastiCache -
Amazon ElastiCache offers fully managed Redis and Memcached in-memory data stores. You can build data-intensive apps or improve the performance of your existing apps by retrieving data from high throughput and low latency in-memory data stores.


Amazon MemoryDB - 
Amazon MemoryDB for Redis is a Redis-compatible, durable, in-memory database service that delivers ultra-fast performance. It is purpose-built for modern applications with microservices architectures.
Amazon MemoryDB is compatible with Redis, a popular open source data store, enabling customers to quickly build applications using the same flexible and friendly Redis data structures, APIs, and commands that they already use today. With Amazon MemoryDB, all of your data is stored in memory, which enables you to achieve microsecond read and single-digit millisecond write latency and high throughput. Amazon MemoryDB also stores data durably across multiple Availability Zones (AZs) using a distributed transactional log to enable fast failover, database recovery, and node restarts. Delivering both in-memory performance and Multi-AZ durability, Amazon MemoryDB can be used as a high-performance primary database for your microservices applications eliminating the need to separately manage both a cache and durable database.


Amazon Neptune - graphdb
Amazon Neptune is a fast, reliable, fully managed graph database service for applications that work with highly connected datasets. Neptune offers read replicas for highly availability. You can create point-in-time copies, configure continuous backup to Amazon Simple Storage Service (Amazon S3) with replication across Availability Zones.





===========================================================================
A relational database is built to store structured data in tables using a defined schema.

Key-value databases are a type of non-relational database that store unstructured data in the form of key-value pairs.

Document stores are a type of non-relational database that store semistructured and unstructured data in the form of files. 

In-memory data stores can be used for both structured and semistructured data sources.

Graph databases are purpose-built to store any type of data: structured, semistructured, or unstructured. 

==================================
Amazon RDS, Aurora, Amazon Redshift
Relational	
Traditional applications, ERP, CRM, ecommerce
==================================

DynamoDB 
Key-value    
High-traffic web applications, ecommerce systems, gaming apps
==================================

Amazon ElastiCache for Memcached, Amazon ElastiCache for Redis
In-memory
Caching, session management, gaming leaderboards, geospatial applications
==================================

Amazon DocumentDB
Document	
Content management, catalogs, user profiles
==================================

Amazon Keyspaces
Wide column	
High-scale industrial applications for equipment maintenance, fleet management, route optimization
==================================

Neptune
Graph	
Fraud detection, social networking, recommendation engines
==================================

Timestream
Time series	
IoT applications, Development Operations (DevOps), industrial telemetry
==================================

Amazon QLDB
Ledger	
Systems of record, supply chain, registrations, banking transactions

===========================================================================
RELATIONAL DATABASES.
Relational databases rely on a series of structures, called tables, to hold data. These tables group data based on a person, place, thing, or event related to that data. These groupings are referred to as entities. Each entity is stored as a table.

ENTITY_____________________________     ENTITY____________________________
                             FIELD                                   FIELD 
-----------------------------------     -----------------------------------
|RECORD RECORD RECORD RECORD RECORD     |RECORD RECORD RECORD RECORD RECORD
|RECORD RECORD RECORD RECORD RECORD     |RECORD RECORD RECORD RECORD RECORD
|RECORD RECORD RECORD RECORD RECORD     |RECORD RECORD RECORD RECORD RECORD
|RECORD RECORD RECORD RECORD RECORD     |RECORD RECORD RECORD RECORD RECORD

Rules within the schema define if the attribute is required or optional.


To create a relationship between tables, you first need to ensure that every row in a table is unique. Do this by creating a public key (e.g., customer ID) in a table to give each record a unique value. A foreign key uses values from the primary key in another table to define a record in the current table. This is what builds a relationship between two tables. Some database engines can enforce this relationship by ensuring that only values from a primary key can be used as a foreign key.



Pr=Primary - Fr=Foreign
CUSTOMER DATA TABLE      SALES DATA TABLE.
Pr Key.                 Pr Key.         Fr Key.
CUSTID  NAME ADDR       SALEID  DATE    CUSTID

Best Optimization:
OLTP for write intensive operations,
OLAP for read intensive operations (Data Warehouse)


Data indexing

You navigate a relational database using structured query language, or SQL. Tables should be indexed to allow a query to quickly find the data needed to produce a result. Indexes can also help control the way data is physically stored on disk. They physically group records into a predictable order based on the key values within the table. This plays a huge part in the speed and efficiency of queries.

e.g. List all orders placed on Jan 05, 2019

NO Index            Index on OrderDate
12,000 row scan     50 row seek

Online transaction processing (OLTP) databases focus on recording Update, Insertion, and Deletion data transactions. OLTP queries are simple and short, which requires less time and space to process. A great example of an OLTP system is a bank ATM, in which you can modify your bank account using short transactions. 

Online analytical processing (OLAP) databases store historical data that has been input by OLTP. OLAP databases allow users to view different summaries of multidimensional data. Using OLAP, you can extract information from a large database and analyze it for decision-making. A good example of an OLAP system is a business intelligence tool.
------------------------------------------------------------------------
AWS Relational Offerings.
Amazon Relational Database Service (Amazon RDS) provides the needs for many different relational database management systems. Amazon RDS supports the most popular database engines including MySQL, PostgreSQL, MariaDB, Oracle, and SQL Server.


e.g.
My PostgreSQL database is seeing a lot of write I/Os smaller than 4KB. We're consuming a good amount of I/O resources. What should I use?
ans.
Amazon Aurora is MySQL and PostgreSQL compatible. This means you can use most of the code, applications, drivers, and tools you already have with your MySQL or PostgreSQL databases with little or no change.

e.g.
I need a data warehouse solution that provisions infrastructure capacity and automates ongoing administrative tasks. What should I use?
ans.
Amazon Redshift delivers 10 times faster performance than other data warehouses by using machine learning, massively parallel query execution, and columnar storage on high-performance disk. You can set up and deploy a new data warehouse in minutes. Run queries across petabytes of data in your Amazon Redshift data warehouse and exabytes of data directly from your data lake built on Amazon Simple Storage Service (Amazon S3) with Amazon Redshift Spectrum.
=========================================================================
NON-RELATIONAL DATABASES.

Non-relational databases can be deployed on massively distributed commodity servers. These databases have an advantage in scaling and can handle much larger data sets than relational databases. The massive distribution and scale does come at a cost, in the form of eventual consistency. This means that data may not be updated at the same time for all of the distributed systems. Eventual consistency can be an issue for applications that require ACID (Atomicity, Consistency, Isolation, Durability) compliance. Organizations requiring ACID compliance will want to be sure the non-relational database they choose can support this requirement.

Non-relational database types:

Key-value databases----------------------------------------------
–
Key-value databases logically store data in a single table. Within the table, the values are associated with a specific key and stored in the form of blob objects without a predefined schema. The values can be of nearly any type.

Strengths:
Very flexible
Able to handle a wide variety of data types
Keys are linked directly to their values with no need for indexing or complex join operations
Content of a key can easily be copied to other systems without reprogramming the data

Weaknesses:
Analytical queries are difficult to perform due to the lack of joins
Access patterns need to be known in advance for optimum performance


Document databases--------------------------------------------------
+
Document stores keep files containing data as a series of elements. These files can be navigated using numerous languages including Python and Node.js. Each element is an instance of a person, place, thing, or event. For example, a document store may hold a series of log files from a set of servers. These log files can each contain the specifics for that system without concern for what the log files in other systems contain.

Strengths:
Flexibility
No need to plan for a specific type of data when creating one
Easy to scale

Weaknesses:
Sacrifice ACID compliance for flexibility
Databases cannot query across files natively


In-memory databases----------------------------------------------------
+
In-memory databases are used for applications that require real-time access to data. Most databases have areas of data that are frequently accessed but seldom updated. Additionally, querying a database is always slower and more expensive than locating a key in a key-value pair cache. Some database queries are especially expensive to perform. By caching such query results, you pay the price of the query once and then are able to quickly retrieve the data multiple times without having to re-execute the query.

Strengths:
Support the most demanding applications requiring sub-millisecond response times
Great for caching, gaming, and session store
Adapt to changes in demands by scaling out and in without downtime
Provide ultrafast (sub-microsecond latency) and inexpensive access to copies of data

Weaknesses:
Data that is rapidly changing or is seldom accessed
Application using the in-memory store has a low tolerance for stale data


Graph databases--------------------------------------------------------
+
Graph databases store data as nodes, while edges store information on the relationships between nodes. Data within a graph database is queried using specific languages associated with the software tool you have implemented. Review the Understanding graph relationships section below for more information.

Strengths:
Allow simple, fast retrieval of complex hierarchical structures
Great for real-time big data mining
Can rapidly identify common data points between nodes
Great for making relevant recommendations and allowing for rapid querying of those relationships

Weaknesses:
Cannot adequately store transactional data
Analysts must learn new languages to query the data
Performing analytics on the data may not be as efficient as with other database types

===========================================================================

"Database Migration"
Managing on-premises and cloud-based databases to run at scale, with high availability and reliability is a difficult, time-consuming, and expensive undertaking. Migrating your databases and data warehouses to AWS allows you to take advantage of a portfolio of fully managed, high-performance, and cost-effective databases.

Common migration use case examples include:

MongoDB to Amazon DocumentDB
Oracle and SQL Server to Amazon Relational Database Service (Amazon RDS) and Amazon Aurora
Cassandra to Amazon DynamoDB
Terraform to Amazon Redshift

Migrating data to AWS

There are several AWS tools and services to migrate data from an external database to AWS. AWS Database Migration Service (AWS DMS) helps you migrate databases to AWS efficiently and securely. The source database can remain fully operational during the migration, minimizing downtime to applications. At its most basic level, AWS DMS is an instance in the AWS Cloud that runs replication software.

However, AWS DMS creates only those objects required to efficiently migrate the data. To migrate the remaining database elements and schema, you need to use other tools depending on the type of database migration. For example, if you are migrating an on-premises Microsoft SQL database, you can use native Microsoft SQL tools to migrate the database to Amazon RDS for Microsoft SQL.

Homogeneous migrations, where you migrate between same database engines, may require the use of native database tools to migrate database elements.

Heterogenous migrations, where you migrate between different database engines, require the use of the AWS Schema Conversion Tool (AWS SCT) to first translate your database schema to the new platform. You can then use AWS DMS to migrate the data. It is important to understand that AWS DMS and SCT are two different tools that serve different needs. 

=====================================================================
What tools would you use to perform a large-scale migration of an on-premises data warehouse to Amazon Redshift? (Select TWO)

AWS Snowball Edge
AWS Direct Connect
````AWS DMS
Amazon S3
```AWS SCT agent

To perform a large-scale migration of an on-premises data warehouse to Amazon Redshift, you can use:

AWS DMS (Database Migration Service): AWS DMS is a fully managed service that enables you to migrate databases to AWS quickly and securely. It supports both homogeneous (e.g., Oracle to Oracle) and heterogeneous (e.g., Oracle to Amazon Redshift) migrations.

AWS SCT agent (AWS Schema Conversion Tool agent): The AWS SCT agent is used in conjunction with the AWS Schema Conversion Tool. It assists in converting the schema of the source database to a format that can be used with the target database, including Amazon Redshift.


=================================================================================================================
You have developed a web application running on a number of EC2 instances running ASP.NET. You are using an S3 bucket to store product data, with customer transaction data held in an RDS database. You anticipate that the number of connections into your website will grow considerably over the next year, and you want to configure a scalable place to store session state data so that multiple web servers can share the session state. Which of the following are suitable options for this application?

(Choose 2)

Use ElastiCache to store session state.`````


Lambda can store the session state.


Store session state locally on each EC2 instance.


Store the data in the same RDS database used for customer transactions.


Store the session state data in a DynamoDB table.`````