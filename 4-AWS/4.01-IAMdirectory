Create a VPC
Create a VPC with two public subnets. AWS Directory Service requires two subnets in your VPC, and each subnet must be in a different Availability Zone. For more information about VPC, see What is Amazon VPC?.
1--------------------------------------
Open the Amazon VPC console at https://console.aws.amazon.com/vpc/.
2--------------------------------------
In the VPC Dashboard, choose Create VPC.
3----------------------------------------
Under VPC settings, choose VPC and more.
4----------------------------------------
Complete these fields as follows:

@ Keep Auto-generated selected under Name tag auto-generation. Change project to ADS VPC.

@ The IPv4 CIDR block should be 10.0.0.0/16.

@ Keep No IPv6 CIDR block option selected.

@ The Tenancy should remain Default.

@ Select 2 for the Number of Availability Zones (AZs).

@ Select 2 for the Number of public subnets. The number of private subnets can be changed to 0.

@ Choose Customize subnet CIDR blocks to configure the public subnet IP address range. The public subnet CIDR blocks should be 10.0.0.0/20 and 10.0.16.0/20.
5--------------------------------------
Choose Create VPC. It takes several minutes for the VPC to be created.
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=--==-=-=-=-=-=-=-=-=-=-=-=-=

Step 2: Create your Simple AD directory
PDF
RSS
To create a new directory, perform the following steps. Before starting this procedure, make sure you have completed the prerequisites identified in Simple AD prerequisites.

To create a Simple AD directory
1-------------------------------------------------
In the AWS Directory Service console navigation pane, choose Directories and then choose Set up directory.
2-------------------------------------------------
On the Select directory type page, choose Simple AD, and then choose Next.
3-------------------------------------------------
On the Enter directory information page, provide the following information:

Directory size
    Choose from either the Small or Large size option. For more information about sizes, see Simple Active Directory.

Organization name
    A unique organization name for your directory that will be used to register client devices.

    This field is only available if you are creating your directory as part of launching WorkSpaces.

Directory DNS name
    The fully qualified name for the directory, such as corp.example.com.

Directory NetBIOS name
    The short name for the directory, such as CORP.

Administrator password
    The password for the directory administrator. The directory creation process creates an administrator account with the user name Administrator and this password.

    The directory administrator password is case-sensitive and must be between 8 and 64 characters in length, inclusive. It must also contain at least one character from three of the following four categories:

    Lowercase letters (a-z)
    Uppercase letters (A-Z)
    Numbers (0-9)
    Non-alphanumeric characters (~!@#$%^&*_-+=`|\(){}[]:;"'<>,.?/)

Confirm password
    Retype the administrator password.

Directory description
    An optional description for the directory.
4--------------------------------------------------
On the Choose VPC and subnets page, provide the following information, and then choose Next.

VPC
    The VPC for the directory.

Subnets
    Choose the subnets for the domain controllers. The two subnets must be in different Availability Zones.
5-------------------------------------------------
On the Review & create page, review the directory information and make any necessary changes. When the information is correct, choose Create directory. It takes several minutes for the directory to be created. Once created, the Status value changes to Active.


-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=--==-=-=-=-=-=-=-=-=-=-=-=-=
https://docs.aws.amazon.com/directoryservice/latest/admin-guide/usecase1.html


==============================================================================================================
An IAM policy variable is a placeholder that you can use when you don't know the exact value of a resource or
condition key when you write the policy. It's a great way to write dynamic IAM policies that allow access to resources
based on a user attribute, such as username.


==============================================================================================================
Over the past three months, AWS costs have been steadily rising. In an attempt to improve visibility and manage costs, the company wants to set up a system to send notifications if the current spending is over budget.

Which of the following services can help facilitate this process?


AWS Cost & Usage Report

AWS Billing console

````AWS Budgets

AWS Cost Explorer

AWS Budgets can help facilitate this process.

AWS Budgets allows you to set custom cost and usage budgets for your account. You can define budget thresholds and receive notifications (via email or SNS) when your actual costs or usage exceed those thresholds. This way, you can proactively monitor and manage your costs to ensure they stay within budget.

===============================================================================================================
A company is currently in the process of integrating their on-premises data center to their cloud infrastructure in AWS. One of the requirements is to integrate the on-premises Lightweight Directory Access Protocol (LDAP) directory service to their AWS VPC using IAM.

Which of the following provides the MOST suitable solution to implement if the identity store that they are using is not compatible with SAML?

Create IAM roles to rotate the IAM credentials whenever LDAP credentials are updated.
Set up an IAM policy that references the LDAP identifiers and AWS credentials.
Implement the AWS IAM Identity Center service to manage access between AWS and your LDAP.
Create a custom identity broker application in your on-premises data center and use STS to issue short-lived AWS credentials.`````````````````

// If your identity store is not compatible with SAML 2.0, then you can build a custom identity broker application to perform a similar function. The broker application authenticates users, requests temporary credentials for users from AWS, and then provides them to the user to access AWS resources.

// The application verifies that employees are signed into the existing corporate networkâ€™s identity and authentication system, which might use LDAP, Active Directory, or another system. The identity broker application then obtains temporary security credentials for the employees.

// To get temporary security credentials, the identity broker application calls either AssumeRole or GetFederationToken to obtain temporary security credentials, depending on how you want to manage the policies for users and when the temporary credentials should expire. The call returns temporary security credentials consisting of an AWS access key ID, a secret access key, and a session token. The identity broker application makes these temporary security credentials available to the internal company application. The app can then use the temporary credentials to make calls to AWS directly. The app caches the credentials until they expire, and then requests a new set of temporary credentials.