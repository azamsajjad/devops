https://aws.amazon.com/faqs/

Well, for the Developer Associate Exam,
it's all about Serverless,
so make sure you read the FAQs for these services.
When it comes to the developer tools,
focus on CodeCommit, CodePipeline,
CodeDeploy, and CodeBuild.
For security, it's identity and access management,
Cognito, and KMS as well.
When it comes to automation and monitoring,
focus on CloudFormation, AWS SAM, CloudWatch, and X-Ray.
For Containers, make sure you read ECS and ECR.
And for messaging and streaming, its SQS and Kinesis.


https://aws.amazon.com/whitepapers


---------------------------------------------------------------------------
A developer wants to use CodeBuild to set up continuous integration for their project. They would like to ensure the project is integrated with the latest code and that the DevOps team is automatically notified of a failure in the build process by receiving an SMS message. Which of the following should the developer implement?

"Use CloudWatch Events and SES notifications to send a message to the DevOps team.

    SES is an email notification service; it cannot be used to send SMS messages."

Selected
Use the CodePipeline dashboard to view the CodeBuild events log.

Store the source code in EFS.

Use CloudWatch Events and an SNS topic to notify subscribers of build events.

    CodeBuild natively supports CloudWatch Events; SNS is a subscription-based notification service that integrates with CloudWatch.


"Store the source code in CodeCommit.

    CodeCommit is a supported source code repository for CodeBuild.
"


Add the name of the email group to the notifications section of the CodeBuild console.

    The CodeBuild console does not enable you to configure notifications in this way.


---------------------------------------------------------------------------
You are building a web application that uses API Gateway to expose a Lambda function to process requests from clients over the internet. While testing, the API Gateway frequently times out; however, when calling the Lambda function directly, it completes successfully every time.

Which of the following API Gateway metrics in Amazon CloudWatch should you check in order to troubleshoot the issue?

"Latency

    Latency relates to the time between when API Gateway receives a request from a client and when it returns a response to the client. The latency includes the integration latency and other API Gateway overhead. This is useful because a latency issue could be causing the timeout."

Reference: API Gateway metrics

Count

CacheMissCount

    CacheMissCount relates to the number of requests served from the backend in a given period, when API caching is enabled. A cache miss should not cause API Gateway to time out, so this metric will not help you to understand why the API is timing out.

Reference: API Gateway metrics

Selected
"IntegrationLatency

    IntegrationLatency relates to the time between when API Gateway relays a request to the backend and when it receives a response from the backend. This is useful because a latency issue could be causing the timeout."

Reference: API Gateway metrics
---------------------------------------------------------------------------
You are designing a serverless online banking application that uses a Lambda function to process a credit check for new customers. The Lambda function makes an API call to an external third-party credit checking agency that performs the credit check and returns a response.

During performance testing, you discover that under peak load conditions, the third-party credit check API sometimes times out or returns an error, causing your function to fail. The support team has requested to receive notifications if the credit check API error rate exceeds 10% of the total number of transactions in any given hour. Which solution will meet these requirements?

Publish the results of the credit check to a DynamoDB table. Configure a Lambda function to query the table for failed invocations and notify an SNS topic when the error rate exceeds the specified rate.

Publish the failed credit check API calls to an SQS queue for further processing. Configure a CloudWatch alarm to send a message to the SQS queue when error rate exceeds the specified rate.

SQS is a message queueing service; it can not be used to notify the support team.

Selected
"Publish custom metrics to CloudWatch that record the failures of the credit check API calls. Configure a CloudWatch alarm to notify an SNS topic when the error rate exceeds the specified rate.

    Using CloudWatch, you can easily configure an alarm using a metric of your choice. When the alarm is triggered, CloudWatch can send a notification to an SNS topic to email the support team."

Reference: CloudWatch SNS Notifications

Publish the Lambda errors to CloudWatch Logs. Configure a Lambda function to query the CloudWatch Logs and notify an SNS topic when the error rate exceeds the specified rate.
---------------------------------------------------------------------------
You are storing user profile data for a mobile gaming application in a DynamoDB table. The product owner asks you to generate a list of all registered users that are located in the USA. As you retrieve the information from DynamoDB, you receive a ProvisionedThroughputExceededException error. What does the error ProvisionedThroughputExceededException mean in DynamoDB?

"You exceeded your maximum allowed provisioned throughput for a table or for one or more global secondary indexes.

    The ProvisionedThroughputExceededException means that you exceeded your maximum allowed provisioned throughput for a table or for one or more global secondary indexes."

Reference: Class ProvisionedThroughputExceededException

The DynamoDB table is unavailable.

The DynamoDB table has exceeded the allocated space.

The size of the query you tried to perform is too large. Find a way to split the query into a set of smaller queries.

It should not be necessary to split the query.
---------------------------------------------------------------------------
You are using CodeCommit to store the source code for your application. Whenever a team member creates or updates a pull request, you would like to trigger a Lambda function to save details of the pull request in a DynamoDB table. Which of the following should you implement in order to achieve this?

Use SNS to trigger the Lambda function whenever a pullRequestSourceBranchUpdated event is detected.

"Use EventBridge to trigger the Lambda function whenever a pullRequestCreated event or a pullRequestSourceBranchUpdated event is detected.

    EventBridge can be used to trigger a Lambda function based on CloudWatch metrics. The CloudWatch metrics to focus on are pullRequestCreated and pullRequestSourceBranchUpdated."

Reference: Monitoring CodeCommit Events

Use EventBridge to send a notification to SNS whenever a pullRequestCreated event or a pullRequestSourceBranchUpdated event is detected. Use SNS to trigger the Lambda function to save the data to DynamoDB.

It is not necessary to use an SNS topic to trigger the Lambda function. EventBridge can do this directly.

Selected
Use CloudWatch Logs Insights to trigger the Lambda function whenever a pullRequestCreated event or a pullRequestSourceBranchUpdated event is detected.---------------------------------------------------------------------------
A developer is working on a new JavaScript web application that allows users to post opinions to a shared forum and contribute to discussions about the latest innovations in cloud computing. Users have the ability to upvote their favorite posts, and at the end of each day, the top 250 posts are displayed in a leader board. The application makes a large batch request directly to DynamoDB using the BatchGetItem API call to report the most popular 250 posts. When a large request is made, the DynamoDB table frequently returns a partial result, accompanied by a value for UnprocessedKeys. Which of the following actions are ways that the developer can enable the application to receive all the remaining items when the BatchGetItem response includes a value for UnprocessedKeys?

"Retry the operation using an exponential backoff algorithm.

    If DynamoDB returns any unprocessed items, you should retry the batch operation on those items. However, AWS strongly recommends that you use an exponential backoff algorithm. If you retry the batch operation immediately, the underlying read or write requests can still fail due to throttling on the individual tables. If you delay the batch operation using exponential backoff, the individual requests in the batch are much more likely to succeed."


"Update the application to use the AWS software development kit (AWS SDK) for JavaScript to make the API requests.

    AWS SDKs automatically implement retries using exponential backoff. If you delay the batch operation using exponential backoff, the individual requests in the batch are much more likely to succeed."

Reference: Retry and Backoff with AWS SDKs

Retry the batch operation immediately.

Increase the provisioned read capacity of the DynamoDB table.

A single BatchGetItem operation can retrieve up to 100 items. BatchGetItem returns a partial result if the response size limit is exceeded. Increasing the read capacity will not help with this problem, because the application is making large batch requests of over 100 items.

Reference: BatchGetItem API Call

Selected
Increase the provisioned write capacity of the DynamoDB table.

BatchGetItem is a read operation, so increasing the write capacity of the table will not help.
.---------------------------------------------------------------------------
You are working on an application for an online training company that stores product data in DynamoDB. This week, the company is running a big promotion on a few courses, and this is bringing lots of new traffic to your website, causing an increased number of queries to the database. Database queries are now running much slower than usual, and the operations team is concerned that the DynamoDB table is being throttled. Which of the following approaches would you recommend to improve read performance?

Redesign your table to use a more distinct partition key to enable the I/O load to be more evenly distributed across partitions.

Add a read replica and point the DynamoDB API calls at the read replica.

Configure the application to use scans rather than queries and run multiple scans in parallel.

"Configure a DAX cluster and point the DynamoDB API calls at the DAX cluster.

    Using DAX is the recommended approach to reducing response times for read-intensive applications, applications that read a few items frequently, and applications that perform repeated reads against a large set of data."
---------------------------------------------------------------------------
Your application uses Kinesis to collect customer data from various sources, including web forms, mobile apps, and IoT devices. This data is analyzed in real time in order to gain insights and improve customer experience. Following a recent Black Friday event, your website experienced unprecedented traffic, and sales have doubled over the last quarter. This increase in traffic caused some issues, and your Kinesis stream is frequently throwing a ProvisionedThroughputExceededException error. What should you do to fix this problem?

Provision a second Kinesis stream to handle the additional load. Use a Lambda function to merge the processed data from the two streams.

"Reduce the frequency or size of your requests.

    ProvisionedThroughputExceededException means that the request rate for the stream is too high or the requested data is too large for the available throughput. Reducing the frequency or size of requests will reduce the throughput that is being used."

Reference: ProvisionedThroughputExceededException

Selected
Increase the number of consumers.

Retry the operation immediately.

"Reshard your stream.

    Resharding your stream to increase the number of shards in the stream allows you to adjust the number of shards in your stream to adapt to changes in the rate of data flow through the stream."
---------------------------------------------------------------------------




2
---------------------------------------------------------------------------





---------------------------------------------------------------------------
You are troubleshooting a major incident that resulted in data loss in your application. Your manager asks if you can provide a time-ordered sequence of any modifications that happened to the items in your DynamoDB table over the past 24 hours so that you can work out what happened. Provided any pre-configuration that was completed, which service could you use to most efficiently provide this?

Kinesis Data Streams

CloudTrail

CloudTrail could be used to help identify the API calls made to DynamoDB; however, this is not the most efficient way to gather this data. CloudTrail is not designed to enable you to provide a time-ordered sequence of any modifications that happened to the items in your DynamoDB table.

Selected
"DynamoDB Streams

DynamoDB Streams captures a time-ordered sequence of item-level modifications in a DynamoDB table and durably stores the information for up to 24 hours."
---------------------------------------------------------------------------
You are trying to diagnose a performance problem with your serverless application, which uses Lambda, API Gateway, S3, and DynamoDB. Your DynamoDB table is performing well, and you suspect that your Lambda function is taking too long to execute. Which of the following could you use to investigate the source of the issue?

// Lambda invocations sum metric in CloudWatch

// Lambda invocations sum measures the number of times a function is invoked in response to an event or invocation API call.

// Selected
// API Gateway latency metric in CloudWatch

// API Gateway latency is the time between when API Gateway receives a request from a client and when it returns a response to the client.

Selected
"AWS X-Ray

AWS X-Ray can be used to display a histogram showing the latency of your Lambda function. Latency is the amount of time between when a request starts and when it completes. API Gateway integration latency is the time between when API Gateway relays a request to the backend and when it receives a response from the backend. API Gateway latency is the time between when API Gateway receives a request from a client and when it returns a response to the client. The latency includes the integration latency and other API Gateway overhead. Lambda invocations sum measures the number of times a function is invoked in response to an event or invocation API call."

Reference:

"API Gateway CloudWatch Metrics
Lambda CloudWatch Metrics
X-Ray FAQs
Using Latency Histograms in the AWS X-Ray Console
API Gateway integration latency metric in CloudWatch

AWS X-Ray can be used to display a histogram showing the latency of your Lambda function. Latency is the amount of time between when a request starts and when it completes. API Gateway integration latency is the time between when API Gateway relays a request to the backend and when it receives a response from the backend. API Gateway latency is the time between when API Gateway receives a request from a client and when it returns a response to the client. The latency includes the integration latency and other API Gateway overhead. Lambda invocations sum measures the number of times a function is invoked in response to an event or invocation API call."
---------------------------------------------------------------------------
You have a distributed application that is made up of a number of different Lambda functions as well as API Gateway endpoints and DynamoDB tables. You have noticed that the application is running unusually slow today. Which of the following tools would be the best choice to help identify what is going on?

VPC Flow Logs

VPC Flow Logs cannot be used to identify performance issues in distributed serverless applications.

Selected
CloudTrail

CloudWatch

"X-Ray

AWS X-Ray helps developers analyze and debug production, distributed applications, such as those built using a microservice architecture. With X-Ray, you can understand how your application and its underlying services are performing to identify and troubleshoot the root cause of performance issues and errors."
---------------------------------------------------------------------------

Your API Gateway endpoint is experiencing server errors indicated by a 5xx HTTP response code. How can you increase the reliability of the application while reducing operational costs?

"Configure your application to use retry logic with exponential backoff.

Server errors are indicated by a 5xx HTTP response code and need to be resolved by Amazon. You can resubmit or retry the request until it succeeds. Numerous components on a network, such as DNS servers, switches, load balancers, and others can generate errors anywhere in the life of a given request. The usual technique for dealing with these error responses in a networked environment is to implement retries in the client application. Each AWS SDK implements automatic retry logic with an exponential backoff algorithm for better flow control. If you are not using an AWS SDK, you should retry original requests that receive server (i.e., 5xx) or throttling errors. However, client errors (i.e., 4xx) indicate that you need to revise the request to correct the problem before trying again."

Reference: Error Retries and Exponential Backoff in AWS.

Distribute the load by adding an Elastic Load Balancer in front of the API Gateway.

Increase capacity by scaling the backend of your API.

This indicates an internal problem with your API. Fix the issue in your API and try the request again.

This does not indicate an internal problem with your API.

---------------------------------------------------------------------------

You are supporting a legacy application that runs on a virtual machine running RedHat Linux in your own data center. Your CTO asks you to ensure that all RedHat instances in the legacy data center are monitored using CloudWatch. You also need to ensure that the support team is notified by email if an error message appears in the application log file. Which of the following do you recommend?

Configure a Lambda function that periodically connects to the application servers and monitors the application log file. Use a CloudWatch alarm to trigger an SNS notification if an error appears in the application log file.

"Install the CloudWatch agent on the Linux servers. Configure the agent to monitor the application log file. Use a CloudWatch alarm to trigger an SNS notification if an error appears in the application log file."

You will need to install the CloudWatch agent on each of the on-premises servers. You can configure the CloudWatch agent to collect the log data that you want to monitor, and send it to CloudWatch Logs. CloudWatch alarms can be used to monitor the log data and alert the team using SNS when something goes wrong.

Install the CloudWatch agent on the Linux servers. Configure the agent to monitor the operating system messages file. Use a CloudWatch alarm to trigger an SNS notification if an error appears in the messages file.

CloudWatch should trigger the alarm if an error message appears in the application log file, not the operating system messages file.

Selected
Update your application code to send application log data to CloudWatch logs. Use a CloudWatch alarm to trigger an SNS notification if an error appears in the application log file.