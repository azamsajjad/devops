---------------------------------------------------------------------------
You have deployed a MySQL RDS database cluster to store customer transaction data that needs to be queried and updated by a recommendation engine application for an online retailer. Each week, the recommendation engine runs extensive queries on the customer transaction data to identify products that should be marketed to customers, based on their shopping habits. The product owner has asked you to find a solution to improve performance of the weekly queries, including the ability to rank and sort the data to quickly identify the most relevant data for a given query. Which of the following solutions do you recommend?

Use ElastiCache for Memcached to improve read performance and sort and rank the relevant data.

ElastiCache for Memcached can be used to improve read performance of databases; however, it does not have the ability to sort and rank query results.

Selected
Scale your RDS instances to improve read performance, and refine the SQL query so that the data is properly sorted and ranked for relevance.

Use ElastiCache for Redis to improve read performance and sort and rank the results.

"ElastiCache for Redis can be used to improve read performance of databases, and it also has the ability to sort and rank query results.

    Use RDS Proxy connection pooling to improve read performance, and sort and rank the relevant data."
---------------------------------------------------------------------------
You have developed a Lambda function, which is not running as performant as expected. Which of the following approaches can improve the performance of your function?

Package all dependencies with your deployment package.

Your deployment package includes your application code and its dependencies. This is the standard way to configure your function; it is not a way of improving performance.

Selected
"Only include the libraries you need to minimize the size of your deployment package.

    Only including the libraries you need will minimize the time taken for Lambda to unpack the deployment package. For Java functions, you can also use AWS Lambda SnapStart."

Selected
Store environment variables outside the function.

"Establish your database connections from within the Lambda execution environment to enable connection reuse.

    Establishing connections within the execution environment allows them to be reused the next time the function is invoked, which saves time. On a new technology note, AWS Lambda SnapStart is a great option for Java functions."
---------------------------------------------------------------------------
You are developing a Java application that runs in Lambda. However, you are experiencing performance issues, particularly when the function initializes. In order to work properly, your application depends on a number of library files that are contained in the AWS SDK library. You need to find a way to reduce the deployment footprint so that you can decrease the time it takes for your function to complete the static initialization phase. Which of the following can you do to improve the performance of this function?

Cache the required libraries in /tmp.

Add the libraries as a Lambda layer.

Even if the libraries are added as a layer, they still contribute to the size of the deployment package, so this will not reduce the size of the package.

Selected
Create a .zip file containing the deployment package to reduce its size.

"Only include the libraries that are necessary in order for the function to run, instead of the entire AWS SDK library.

    It is best practice to minimize your deployment package size to only include runtime necessities. This will help reduce the size of the deployment package and the amount of time that it takes for the deployment package to be downloaded and unpacked ahead of invocation, during the static initialization phase."
---------------------------------------------------------------------------
You are developing a new database-intensive application that runs on multiple EC2 instances that connect to an existing shared RDS cluster. A typical workflow requires many database connections to be opened and closed, and each time the application re-establishes a connection to the database, additional latency is added while the connection is established. You are also concerned that the application will not scale well due to the number of connections that are frequently being opened and closed. What can you do to improve the time taken to establish the connections and improve the performance and scalability of the application?

Use RDS Multi-AZ to improve database performance.

Use ElastiCache to cache frequently accessed data in memory.

ElastiCache is used to improve read performance by caching frequently accessed database reads in memory; however, it wont improve write performance or issues caused by many database connections being opened and closed,

Selected
Modify the RDS instance clas to use an instance with greater CPU and memory capacity.

"Use RDS Proxy to pool the connections.

    Connection pooling allows applications to share a pool of database connections, which reduces the need to open and close individual database connections that are no longer needed. This improves the performance of database-intensive applications by reducing the amount of time and resources required to establish database connections. RDS Proxy can help prevent connection timeouts during periods of high traffic, which can cause application outages, and can also reduce the cost of scaling an application by allowing multiple applications to share the same database connection pool."
---------------------------------------------------------------------------

---------------------------------------------------------------------------
