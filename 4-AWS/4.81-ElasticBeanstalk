"ELASTIC BEANSTALK"
Platform as a Service
create infrastructure for you
its handles:
infrastructure 
application platform and updates 
you still have complete admin control
no additional charges for beanstalk, only charged for resources you use
"Deployment Updates"
All At Once: involves service interruption, good for testing environment
rolling back requires a further all at once update 

Rolling: reduced capacity during deployment, deploys upgrade in batches
rolling back requires a further rolling update 

Rolling With Additional Batch: maintains full capacity, new updated batch of instances is created, traffic shifts and another batch is updated
rolling back requires a further rolling update -it takes time
not for critical application

Immutable: maintain full capacity, preferred for mission critical systems
rolling back requires deleting new instance

Traffic Splitting: performs immutable deployments and splits traffic b/w old and new deployment, enabling canary Testing (coalmines, CO canary bird)

Blue/green deployment is at DNS level, not EB level.
       ================= EB Environment
      =       __ec2    =
      =      |         =
      =      |         =
r53 --= elb--^         =    This is in-place immutable
      =      |         =
      =      |         =
      =      ----ec2   =
      =                =
       =================
Deciding factor is mainly the database. if you are running db in an instance inside ENV, it will be terminated too. So, its better to go with blue/green deploy with your database outside of it in rds

            ================= EB Environment
            =       __ec2    =
            =      |         =
            =      |         =
r53 --X-----= elb--^         =  This is blue/green
      |      =                = swap ENV URL
      |      =                =
      |      =                =
      |      =                =
      |       =================
      |
      |     ================= EB Environment
      |     =       __ec2    =
      |     =      |         =
      |     =      |         =
r53 --------= elb--^         =
            =                =
            =                =
            =                =
            =                =
             =================

Advanced Elastic Beanstalk Update Setting:
"for instances using Amazon Linux 1":
create .ebextensions folder in root dir of source code 
files you want to run along with code must have .config extension 

"for instances running Amazon Linux 2":
Create a BuildFile for scripts (yaml/json)
in the root directory of your application source
for commands that exit upon completion like shells scripts.
Example Buildfile
                    make: ./build.sh
If you want to provide custom build steps, we recommend that you use predeploy platform hooks for anything but the simplest commands, instead of a Buildfile. Platform hooks allow richer scripts and better error handling. Platform hooks are described in the next section.
------------------------------------
Create a ProcFile for long running processes.
For example, custom commands to start up your application.
Use a Procfile for long-running application processes that shouldn't exit. Elastic Beanstalk expects processes run from the Procfile to run continuously. Elastic Beanstalk monitors these processes and restarts any process that terminates.'

All paths in the Procfile are relative to the root of the source bundle. The following example Procfile defines three processes. The first one, called web in the example, is the main web application.

Example Procfile
web: bin/myserver
cache: bin/mycache
foo: bin/fooapp
Elastic Beanstalk configures the proxy server to forward requests to your main web application on port 5000, and you can configure this port number. A common use for a Procfile is to pass this port number to your application as a command argument. 
------------------------------------
Create PlatformHooks for custom scripts or executables
that run at various stages
when your EC2 instances are being provisioned,
and use a folder structure like this
            .platform/hooks/prebuild
            .platform/hooks/predeploy
            .platform/hooks/postdeploy
to organize and store your scripts.

-------------------------------------
You can
launch RDS within Elastic Beanstalk 
issue: if you terminate your environment, your database is also gone 
    good tfor test environment 

launch RDS outside Elastic Beanstalk 
preferred approach for production systems 
how: 
1-add an additional security group to your env AutoScaling group to allow EC2 instances to communite with DB on relevant port e.g. 3306 for mySQL 

2-provide connection string information to your app servers using EB env properties
ARN for RDS database and db password (min) added to .....
EB->ENV->configuration->Env Properties->add DB connection parameters
key             value 
RDS_HOSTNAME    mysql-instance324324324.us-east-1.rds.amazonaws.com

-----------------------------------
Migrating Applications to Elastic Beanstalk 
for .net apps -> Windows Web Application Migration Assistant for EB
interactive powershell utility migrate website from windows servers to aws
open-source tool available on github


