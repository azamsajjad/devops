Very useful CloudFormation Snippets:
https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/CHAP_TemplateQuickRef.html


CLOUDFORMATION
Infrastructure as Code YAML/JSON
free to use , charged only for resources 
easy roll back 
manage updates and version control 
consistent 

AWSTemplateFormatVersion: "2010-09-09"
Description: "Template to create an EC2 Instance"
Metadata:
  Instances:
    Description: "Web Server Instance"

Parameters:  #input custom values
  EnvType:
    Description: "Environment type"
    Type: String
    AllowedValues:
      - prod
      - test 

Conditions: # provision resources based on environment
  CreateProdResources: !Equals [ !Ref EnvType, prod ]
  
Mappings: #e.g. create custom mappings based on a region 
  RegionMap:
    us-east-1:
      "ami": "ami-0453898e98046c639"

Transform: #include snippets of code outside the main template 
  Name: 'AWS::Include'
  Parameters:
    Location: 's3://MyAmazonS3BucketName/MyFileName.yml'

Resources: #the aws resources you are deploying <---------mendatory section
  EC2Instance:
    Type: AWS::EC2::Instance 
    Properties:
    Outputs:
  InstanceID:
    Description: the instance ID 
    Value: !Ref EC2Instance 
      InstanceType: t2.micro 
      ImageID: ami-0453898e98046c639





Template sections
Templates include several major sections. The Resources section is the only required section. Some sections in a template can be in any order. However, as you build your template, it can be helpful to use the logical order shown in the following list because values in one section might refer to values from a previous section.

Format Version (optional)
The AWS CloudFormation template version that the template conforms to. The template format version isn't the same as the API or WSDL version. The template format version can change independently of the API and WSDL versions.

Description (optional)
A text string that describes the template. This section must always follow the template format version section.

Metadata (optional)
Objects that provide additional information about the template.

Parameters (optional)
Values to pass to your template at runtime (when you create or update a stack). You can refer to parameters from the Resources and Outputs sections of the template.

Rules (optional)
Validates a parameter or a combination of parameters passed to a template during a stack creation or stack update.

Mappings (optional)
A mapping of keys and associated values that you can use to specify conditional parameter values, similar to a lookup table. You can match a key to a corresponding value by using the Fn::FindInMap intrinsic function in the Resources and Outputs sections.

Conditions (optional)
Conditions that control whether certain resources are created or whether certain resource properties are assigned a value during stack creation or update. For example, you could conditionally create a resource that depends on whether the stack is for a production or test environment.

Transform (optional)
For serverless applications (also referred to as Lambda-based applications), specifies the version of the AWS Serverless Application Model (AWS SAM) to use. When you specify a transform, you can use AWS SAM syntax to declare resources in your template. The model defines the syntax that you can use and how it's processed.

You can also use AWS::Include transforms to work with template snippets that are stored separately from the main AWS CloudFormation template. You can store your snippet files in an Amazon S3 bucket and then reuse the functions across multiple templates.

Resources (required)
Specifies the stack resources and their properties, such as an Amazon Elastic Compute Cloud instance or an Amazon Simple Storage Service bucket. You can refer to resources in the Resources and Outputs sections of the template.

Outputs (optional)
Describes the values that are returned whenever you view your stack's properties. For example, you can declare an output for an S3 bucket name and then call the aws cloudformation describe-stack'


Exporting CloudFormation Stack Values
EXPORT:

"Outputs" : {
    "VPCId" : {
      "Description" : "VPC ID",
      "Value" :  { "Ref" : "VPC" },
      "Export" : { "Name" : {"Fn::Sub": "${AWS::StackName}-VPCID" }}
    },
    "PublicSubnet" : {
      "Description" : "The subnet ID to use for public web servers",
      "Value" :  { "Ref" : "PublicSubnet" },
      "Export" : { "Name" : {"Fn::Sub": "${AWS::StackName}-SubnetID" }}
    },
    "WebServerSecurityGroup" : {
      "Description" : "The security group ID to use for public web servers",
      "Value" :  { "Fn::GetAtt" : ["WebServerSecurityGroup", "GroupId"] },
      "Export" : { "Name" : {"Fn::Sub": "${AWS::StackName}-SecurityGroupID" }}


IMPORT:

      "Resources": {
    "WebServerInstance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": "t3.micro",
        "ImageId": "ami-0889a44b331db0194",
        "NetworkInterfaces": [
          {
            "GroupSet": [
              {
                "Fn::ImportValue": {        <-----------------------------
                  "Fn::Sub": "${NetworkStackParameter}-SecurityGroupID" <--
                }
              }
            ],
            "AssociatePublicIpAddress": "true",
            "DeviceIndex": "0",
            "DeleteOnTermination": "true",
            "SubnetId": {
              "Fn::ImportValue": {      <---------------------------------
                "Fn::Sub": "${NetworkStackParameter}-SubnetID" <----------
    

---------------------------------------------------------------------------
https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/install-sam-cli.html

CloudFormation for Serverless 
Serverless Application Model (SAM) is an extension to CloudFormation used to define Serverless Applications 

SAM uses a simplified syntax for defining serverless resources:
$ sam package (packages your application and uploads to S3)
$ sam deploy (deploys your serverless app using CloudFormation)


Run all the commands using the AWS CloudShell, it already has the AWS CLI, SAM CLI installed. 

1) Copy hello-from-lambda.js and template.yml to the CloudShell:
curl -O https://raw.githubusercontent.com/ACloudGuru-Resources/course-aws-certified-developer-associate/main/CloudFormation_SAM_Demo/hello-from-lambda.js

curl -O https://raw.githubusercontent.com/ACloudGuru-Resources/course-aws-certified-developer-associate/main/CloudFormation_SAM_Demo/template.yml

2) Create an S3 bucket (add some random numbers to the bucket name to create a unique name):
aws s3 mb s3://cfsambucket

3) Package the files and save them to the S3 bucket you just created:
sam package --template-file template.yml --output-template-file sam-template.yml --s3-bucket cfsambucket

4) Deploy the code: 
sam deploy --template-file sam-template.yml --stack-name mystack --capabilities CAPABILITY_IAM

5) In the Lambda console, view the code, and test it. 



template.yml 
'# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  sam-app

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
- AWS::Serverless-2016-10-31

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: hello-from-lambda.js
  helloFromLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/hello-from-lambda.helloFromLambdaHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A Lambda function that returns a static string.
      Policies:
        # Give Lambda basic execution Permission to the helloFromLambda
        - AWSLambdaBasicExecutionRole'

---------------------------------------------------------------------------
CF Nested Stacks 
nested stacks
allow you to reuse your CloudFormation code.
So for common use cases you dont need to copy and paste,
you can just reference the CloudFormation code
from within your CloudFormation template.
They are really useful for frequently used configurations.
So for example, for a frequently used configuration
for a load balancer, web server or application server.
And, all you need to do is create a CloudFormation template
defining the resource that you want to create,
store in S3 and then you can reference it
from the resources section of any CloudFormation template
using the stack resource type.